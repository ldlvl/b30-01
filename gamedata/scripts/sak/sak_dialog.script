--------------------------------------------------------------------------------------------------------
-- Сяковы диалоги
-------------------------------------------------------------------------------------------------------
init_xvars()

table_food      = { "bread", "kolbasa", "green_kolbasa", "vodka", "energy_drink", "conserva" }
table_container = { "arc_art_box_1basic", "arc_art_box_basic", "arc_art_box_8basic" }

table_aart = {
    "af_medusa",
    "af_vyvert",
    "af_blood",
    "af_electra_sparkler",
    "af_drops",
    "af_ameba_slime",
    "af_rusty_thorn"
}

table_bart = {
    "af_cristal_flower",
    "af_gravi",
    "af_mincer_meat",
    "af_electra_flash",
    "af_fireball",
    "af_ameba_slug",
    "af_rusty_kristall"
}

table_semart = {
    "af_cristal_flower",
    "af_gravi",
    "af_mincer_meat",
    "af_electra_flash",
    "af_fireball",
    "af_ameba_slug",
    "af_rusty_kristall"
}

table_good_semart = {
    "af_baloon",
    "af_medus_new",
    "af_crist_new",
    "af_flower_new",
    "af_star_new",
    "af_glass_new",
    "af_sul_new"
}

table_cart = {
    "af_cristall",
    "af_night_star",
    "af_ameba_mica",
    "af_gold_fish",
    "af_rusty_sea-urchin",
    "af_soul",
    "af_electra_moonlight",
    "af_crist_new",
    "af_flower_new",
    "af_star_new",
    "af_glass_new",
    "af_dummy_sparkler",
    "af_dummy_green_medusa",
    "af_dummy_green_vyvert",
    "af_dummy_green_blood"
}

table_dart = {
    "af_dummy_spring",
    "af_dummy_dummy",
    "af_dummy_battery",
    "af_dummy_pellicle",
    "af_dummy_glassbeads",
    "af_dummy_fire",
    "af_red_dummy_spring",
    "af_red_dummy_battery",
    "af_red_dummy_pellicle",
    "af_battery",
    "af_sul_new",
    "af_eye",
    "af_compass",
    "af_ice",
    "af_glass_new",
    "af_glassbeads",
    "af_dummy_kolobok"
}

table_red_art = {
    "af_red_dummy_spring",
    "af_red_dummy_battery",
    "af_red_dummy_pellicle"
}

table_green_art = {
    "af_dummy_green_medusa",
    "af_dummy_green_vyvert",
    "af_dummy_green_blood"
}

table_capsule = {
    "af_night_star_capsule",
    "af_gold_fish_capsule",
    "af_cristall_capsule",
    "af_soul_capsule",
    "af_electra_moonlight_capsule",
    "af_rusty_sea-urchin_capsule",
    "af_ameba_mica_capsule",
    "af_dummy_spring_capsule",
    "af_dummy_dummy_capsule",
    "af_dummy_battery_capsule",
    "af_dummy_pellicle_capsule",
    "af_dummy_kolobok_capsule",
    "af_dummy_glassbeads_capsule"
}
table_mayatniks = {
    "af_mayatnik_tuman_new",
    "af_mayatnik_les_new",
    "af_mayatnik_radar_new",
    "af_mayatnik_tesla_new",
    "af_mayatnik_stadion_new",
    "af_mayatnik_chaes_new"
}
table_sakboxes = {
    "inventory_sakbox_05",
    "inventory_sakbox_gar_flame",
    "inventory_sakbox_borov",
    "inventory_sakbox_rad",
    "inventory_sakbox_repair_box",
    "inventory_sakbox_mil_svoboda",
    "inventory_sakbox_dolg_petrenko",
    "inventory_sakbox_yan_kruglov",
    "inventory_sakbox_mil_skraga"
}
nagrad = {
    level_7 = {
        "grenade_f1",
        "ammo_9x39_ap",
        "ammo_og-7b",
        "ammo_7.62x39_ap",
        "ammo_7.62x54_7h14",
        "ammo_vog-25",
        "antirad",
        "medkit_scientic"
    },
    level_6 = {
        "conserva",
        "vodka",
        "antirad",
        "medkit"
    },
    level_5 = {
        "grenade_f1",
        "ammo_9x39_ap",
        "ammo_5.45x39_ap",
        "ammo_5.56x45_ap",
        "ammo_7.62x39_ap",
        "ammo_7.62x54_7h14",
        "ammo_vog-25",
        "antirad",
        "medkit_scientic"
    },
    level_4 = {
        "grenade_f1",
        "grenade_rgd5",
        "ammo_9x19_pbp",
        "ammo_9x39_pab9",
        "ammo_9x39_ap",
        "ammo_5.45x39_ap",
        "ammo_5.56x45_ap",
        "ammo_7.62x39_ap",
        "ammo_7.62x54_7h14",
        "ammo_m209",
        "ammo_vog-25",
        "medkit_army",
        "medkit_scientic",
        "antirad"
    },
    level_3 = {
        "grenade_rgd5",
        "ammo_9x19_pbp",
        "ammo_9x18_fmj",
        "ammo_11.43x23_fmj",
        "ammo_5.45x39_ap",
        "ammo_5.56x45_ap",
        "ammo_5.56x45_ss190",
        "ammo_5.45x39_fmj",
        "ammo_7.62x39_fmj",
        "ammo_7.62x39_ap",
        "ammo_og-7b",
        "ammo_m209",
        "vodka",
        "medkit_army",
        "antirad"
    },
    level_2 = {
        "grenade_rgd5",
        "ammo_9x18_pmm",
        "ammo_5.45x39_fmj",
        "ammo_9x19_fmj",
        "ammo_12x70_buck",
        "ammo_7.62x39_fmj",
        --"ammo_vog-25p",
        "vodka",
        "conserva",
        "medkit_army",
        "bandage",
        "antirad",
        "medkit"
    },
    level_1 = {
        "grenade_rgd5",
        "ammo_9x18_pmm",
        "bandage",
        "ammo_12x70_buck",
        "vodka",
        "bandage",
        "conserva",
        "bandage",
        "medkit"
    }
}

local has_kozel = {
    "trader_task_failed",
    "barman_task_failed",
    "ecolog_task_failed",
    "dolg_task_failed",
    "borov_task_failed",
    "freedom_task_failed",
    "prapor_task_failed",
    "cherep_task_failed",
    "povar_task_failed",
    "engineer_task_failed",
    "capten_task_failed",
    "skraga_task_failed",
    "wolf_task_failed",
    "shustriy_task_failed",
    "drunk_dolg_task_failed",
    "hunter_task_failed",
    "zastava_commander_task_failed",
    "petrenko_task_failed",
    "lisiy_task_failed",
    "voron_task_failed",
    "pahom_task_failed",
    "lim_trader_task_failed",
    "volkodav_task_failed",
    "lesnik_task_failed",
    "mercenary_task_failed",
    "borzyi_task_failed",
    "green_glavn_task_failed",
    "boryan_task_failed"
}

function actor_active_item( n ) return db.actor:item_in_slot( n ) end

function need_zub_repa_up()
    for a = 1, #has_kozel do
        if has_alife_info( has_kozel[ a ] ) then return true end
    end
    return false
end

-- На северных локах небольшой шанс на редкий арт  ++ пусть зелень теперь тоже попадается.
function rand_semart()
    local section = ""
    if sak.level_difficulty[ level.name() ] > 1.3 and dsh.get_next_random( "semeneckyi" ) < 0.2 then
        section = table_good_semart[ dsh.get_next_random( "semeneckyi", 1, #table_good_semart ) ]
    else
        section = table_semart[ dsh.get_next_random( "semeneckyi", 1, #table_semart ) ]
        section = section .. "_dyn" .. tostring( dsh.get_next_random( "semeneckyi", 3, 5 ) ) .. "d"
    end
    return section
end

-- TODO: перекинуть всё это на test.gg_n_artof_m_have()
-- и test.give_n_artof_m() для пущего универсализьму
function gg_n_aart_have( n )
    local amount = 0
    for a = 1, #table_aart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_aart[ a ], 1, true ) then
                local count = #k
                amount = amount + count
            end
        end
    end
    if amount >= n then return true end
end

function give_n_aart( n )
    local amount
    local art_kol = n
    for a = 1, #table_aart do
        amount = 0
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_aart[ a ], 1, true ) then
                local count = #k
                for m = 1, count do
                    if art_kol > 0 then
                        local obj = g_sim:object( k[ m ] )
                        if obj then g_sim:release( obj, true ) end
                        amount  = amount  + 1
                        art_kol = art_kol - 1
                    end
                end
            end
        end
        if amount ~= 0 then
            sak.relocate_item( db.actor, "out", table_aart[ a ], amount )
        end
    end
end

function gg_n_bart_have( n )
    local amount = 0
    for a = 1, #table_bart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_bart[ a ], 1, true ) and not strpos( i, "_new", 1, true ) then
                local count = #k
                amount = amount + count
            end
        end
    end
    if amount >= n then return true end
end

function give_n_bart( n )
    local amount
    local art_kol = n
    for a = 1, #table_bart do
        amount = 0
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_bart[ a ], 1, true ) and not strpos( i, "_new", 1, true ) then
                local count = #k
                for m = 1, count do
                    if art_kol > 0 then
                        local obj = g_sim:object( k[ m ] )
                        if obj then g_sim:release( obj, true ) end
                        amount  = amount + 1
                        art_kol = art_kol - 1
                    end
                end
            end
        end
        if amount ~= 0 then
            sak.relocate_item( db.actor, "out", table_bart[ a ], amount )
        end
    end
end

function gg_n_cart_have( n )
    local amount = 0
    for a = 1, #table_cart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_cart[ a ], 1, true ) and not strpos( i, "_capsule", 1, true ) then
                local count = #k
                amount      = amount + count
            end
        end
    end
    if amount >= n then return true end
end

function give_n_cart( n )
    local amount
    local art_kol = n
    for a = 1, #table_cart do
        amount = 0
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_cart[ a ], 1, true ) and not strpos( i, "_capsule", 1, true )  then
                local count = #k
                for m = 1, count do
                    if art_kol > 0 then
                        local obj = g_sim:object( k[ m ] )
                        if obj then g_sim:release( obj, true ) end
                        amount  = amount + 1
                        art_kol = art_kol - 1
                    end
                end
            end
        end
        if amount ~= 0 then
            sak.relocate_item( db.actor, "out", table_cart[ a ], amount )
        end
    end
end

function gg_n_dart_have( n )
    local amount = 0
    for a = 1, #table_dart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_dart[ a ], 1, true ) and not strpos( i, "_capsule", 1, true ) then
                local count = #k
                amount      = amount + count
            end
        end
    end
    if amount >= n then return true end
end

function give_n_dart( n )
    local amount
    local art_kol = n
    for a = 1, #table_dart do
        amount = 0
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_dart[ a ], 1, true ) and not strpos( i, "_capsule", 1, true ) then
                local count = #k
                for m = 1, count do
                    if art_kol > 0 then
                        local obj = g_sim:object( k[ m ] )
                        if obj then g_sim:release( obj, true ) end
                        amount  = amount  + 1
                        art_kol = art_kol - 1
                    end
                end
            end
        end
        if amount ~= 0 then
            sak.relocate_item( db.actor, "out", table_dart[ a ], amount )
        end
    end
end

local add_art_plus = ""

-- TODO: переделать всё на универсальные функции
function gg_n_aart_identic_have( n )
    for a = 1, #table_aart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if
                strpos( i, table_aart[ a ], 1, true )
                and strpos( i, "_dyn", -6, true )
                and ( tonumber( string.sub( i, -2, -2  ) ) < 5 )
                and #k >= n
            then
                return true
            end
        end
    end
end
function give_n_aart_identic( n )
    local section
    local num = 1
    for a = 1, #table_aart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if
                strpos( i, table_aart[ a ], 1, true )
                and strpos( i, "_dyn", -6, true )
                and ( tonumber( string.sub( i, -2, -2  ) ) < 5 )
                and #k >= n
            then
                section = tostring( table_aart[ a ] )
                num     = tonumber( string.sub( i, -2, -2  ) ) + 1
                if num > 5 then num = 5 end
                for m = 1, n do
                    local obj = g_sim:object( k[ m ] )
                    if obj then g_sim:release( obj, true ) end
                end
                sak.relocate_item( db.actor, "out", table_aart[ a ], n )
                add_art_plus = section .. "_dyn" .. num .. "d"
                return
            end
        end
    end
end
function gg_n_bart_identic_have( n )
    for a = 1, #table_bart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if
                strpos( i, table_bart[ a ], 1, true )
                and strpos( i, "_dyn", -6, true )
                and ( tonumber( string.sub( i, -2, -2  ) ) < 5 )
                and #k >= n
            then
                return true
            end
        end
    end
end
function give_n_bart_identic( n )
    local section
    local num = 1
    for a = 1, #table_bart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if
                strpos( i, table_bart[ a ], 1, true )
                and strpos( i, "_dyn", -6, true )
                and ( tonumber( string.sub( i, -2, -2  ) ) < 5 )
                and #k >= n
            then
                section = tostring( table_bart[ a ] )
                num     = tonumber( string.sub( i, -2, -2  ) ) + 1
                if num > 5 then num = 5 end
                for m = 1, n do
                    local obj = g_sim:object( k[ m ] )
                    if obj then g_sim:release( obj, true ) end
                end
                sak.relocate_item( db.actor, "out", table_bart[ a ], n )
                add_art_plus = section .. "_dyn" .. num .. "d"
                return
            end
        end
    end
end
function gg_n_cart_identic_have( n )
    for a = 1, #table_cart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if
                strpos( i, table_cart[ a ], 1, true )
                and strpos( i, "_dyn", -6, true )
                and ( tonumber( string.sub( i, -2, -2  ) ) < 5 )
                and #k >= n
            then
                return true
            end
        end
    end
end
function give_n_cart_identic( n )
    local section
    local num = 1
    for a = 1, #table_cart do
        for i, k in pairs( sak_inventory.rucksack ) do
            if
                strpos( i, table_cart[ a ], 1, true )
                and strpos( i, "_dyn", -6, true )
                and ( tonumber( string.sub( i, -2, -2  ) ) < 5 )
                and #k >= n
            then
                section = tostring( table_cart[ a ] )
                num     = tonumber( string.sub( i, -2, -2  ) ) + 1
                if num > 5 then num = 5 end
                for m = 1, n do
                    local obj = g_sim:object( k[ m ] )
                    if obj then g_sim:release( obj, true ) end
                end
                sak.relocate_item( db.actor, "out", table_cart[ a ], n )
                add_art_plus = section .. "_dyn" .. num .. "d"
                return
            end
        end
    end
end

function add_art_identic_plus()
    if add_art_plus ~= "" then
        sak.create_items( db.actor, add_art_plus, 1 )
        add_art_plus = ""
    end
end

--- спавн в контейнер в тайнике. не используется
function spawn_arts_cont( obj_sp )
    local rand_kol = lua_random( 3 )
    local arts     = ""
    for a = 1, rand_kol do
        if arts == "" then
            arts = table_aart[ lua_random( 7 ) ] .. "_dyn5d_" .. ( lua_random( 80, 98  ) )
        else
            arts = arts .. ", " .. table_aart[ lua_random( 7 ) ] .. "_dyn5d_" .. ( lua_random( 50, 98  ) )
        end
    end
    local pk         = get_netpk( obj_sp )
    local data       = pk:get()
    data.custom_data = arts
    pk:set( data )
end
-- убрать у актора арты по таблице
function give_spec_arts( list )
    local amount = 0
    for i, sect in ipairs( list ) do
        amount = 0
        for i, ids in pairs( sak_inventory.rucksack ) do
            if i and strposx( i, sect ) then
                for n, id in ipairs( ids ) do
                    misc.release_obj( id, true )
                    amount = amount + 1
                end
            end
        end
        if amount ~= 0 then
            sak.relocate_item( db.actor, "out", sect, amount )
        end
    end
end
-- проверка у Семенова зачем-то. Только чтобы он сказал, что скафандр нужен?
function is_scaf()
    local armor = actor_active_item( 6 )
    if armor and
    ( strpos( armor:section(), "scientific", 1, true )
    or strpos( armor:section(), "ecolog", 1, true ) )
    then return true
    else return false
    end
end

function is_not_scaf() return not is_scaf() end

function give_shurup_uncharge_pda( first_speaker, second_speaker )
    if not has_alife_info( "shurup_charge_pda_not_ready" ) then
        dialogs.relocate_item_section( second_speaker, "device_pda_npc", "out" )
    end
end
--------------------------------------------------------------------------------
function nps_have_gungauss( first_speaker, second_speaker )
    local obj = first_speaker:object( "wpn_gungauss" )
    if obj then return true else return false end
end
function nps_not_have_gungauss( first_speaker, second_speaker )
    return not nps_have_gungauss( first_speaker, second_speaker )
end
function nps_take_gungauss( first_speaker, second_speaker )
    local obj = first_speaker:object( "wpn_gungauss" )
    if obj then
        first_speaker:transfer_item( obj, db.actor )
        sak.relocate_item( second_speaker, "in", "wpn_gungauss", 1 )
    end
end
-- за вскрыте ПДА Крысюка у Доцента наводка на тайник в РЛ у танка
-- сейчас вроде выключено
function add_gift_docent()end

function add_ak_for_ivan( first_speaker, second_speaker )
    local obj = g_sim:story_object( 38 )
    g_sim:create( "wpn_ak74u", obj.position, obj.m_level_vertex_id, obj.m_game_vertex_id, obj.id )
    g_sim:create( "ammo_5.45x39_ap", obj.position, obj.m_level_vertex_id, obj.m_game_vertex_id, obj.id )
end

function voronin_add_prize()
    sak.create_items( db.actor, "bandage", 10 )
    sak.create_items( db.actor, "antirad", 2 )
    sak.create_items( db.actor, "medkit_army", 3 )
    sak.create_items( db.actor, "ammo_5.45x39_ap", 5 )
    relocate_money( db.actor, 30000, "in" )
end

function give_saharov_uncharge_pda( first_speaker, second_speaker )
    if not has_alife_info( "saharov_charge_pda_not_ready" ) then
        dialogs.relocate_item_section( second_speaker, "device_pda_npc", "out" )
    end
end

function give_lisaped_uncharge_pda( first_speaker, second_speaker )
    if not has_alife_info( "lisaped_charge_pda_not_ready" ) then
        dialogs.relocate_item_section( second_speaker, "device_pda_npc", "out" )
    end
end

function give_vergas_uncharge_pda( first_speaker, second_speaker )
    if not has_alife_info( "vergas_charge_pda_not_ready" ) then
        local ids, cnt = registry.inv_objects( second_speaker:id(), true )
        for n = 1, cnt do
            local id   = ids[ n ]
            local sobj = client_obj( id )
            if sobj then
                if sobj:section() == "device_pda_npc" then misc.release_obj( id ) end
            end
        end
        dialogs.relocate_item_section( second_speaker, "device_pda_npc", "out" )
    end
end

function give_uncharge_pda( first_speaker, second_speaker )
    local ids, cnt = registry.inv_objects( second_speaker:id(), true )
    for n = 1, cnt do
        local id   = ids[ n ]
        local sobj = client_obj( id )
        if sobj then
            if sobj:section() == "device_pda_npc" then misc.release_obj( id ) end
        end
    end
    dialogs.relocate_item_section( second_speaker, "device_pda_npc", "out" )
end

function take_uncharge_pda( first_speaker, second_speaker )
    first_speaker:transfer_item( first_speaker:object( "device_pda_npc" ), second_speaker )
    sak.relocate_item( second_speaker, "in", "device_pda_npc", 1 )
end

function charging_pda( first_speaker, second_speaker ) end

function good_charge_pda( first_speaker, second_speaker )
    local obj = first_speaker:object( "device_pda_npc" )
    if obj then
        local pda_id = obj:id()
        return vergas_pda.charge_pda( pda_id )
    end
end

function is_good_pda_have( first_speaker, second_speaker )
    local obj = first_speaker:object( "device_pda_npc" )
    if obj then
        local pda_id = obj:id()
        return vergas_pda.good_pda_have( pda_id )
    end
end

function bad_charge_pda( first_speaker, second_speaker )
    return not good_charge_pda( first_speaker, second_speaker )
end

function charge_pda_have()
    return sak.have_items_count( "device_pda_npc", 1 ) ~= false
end

function take_bino( first_speaker, second_speaker )
    first_speaker:transfer_item( first_speaker:object( "wpn_binoc" ), second_speaker )
    sak.relocate_item( second_speaker, "in", "wpn_binoc", 1 )
end

function blow_time()
  if ( ( amk_vars.blowout or -1 ) > -1 and ( amk_vars.blowout or -1 ) < 5 ) then return true end
end

function no_blow_time() return not blow_time() end

function add_botans_report_dialog()
    if search_npc( "yan_Ecolog", "botans_report_ecolog_dialog", "botans_report_1" ) then
        return
    else
        search_npc( "sim_Ecolog", "botans_report_ecolog_dialog", "botans_report_1" )
    end
end
-- награда по квесту на вещи погибшего от Макса, поменял на рандомное
function add_personal_things_prize()
    local tbl = { "ammo_7.62x39_ap", "ammo_5.56x45_ap", "ammo_12x76_zhekan" }
    sak.create_items( db.actor, "af_full_akkum", 1 )
    sak.create_items( db.actor, tbl[ amk_vars.r_treas_items or 1 ], 4 )
end

function not_have_big_akkum()         return not have_big_akkum() end
function not_have_akkum()             return not have_akkum() end
function is_ready_time_to_game()      return is_ready_time( "start_antichit_time", 25 ) end
function not_ready_time_to_game()     return not_ready_time( "start_antichit_time", 25 ) end
function is_ready_time_to_treasure()  return is_ready_time( "start_treasure_time", 20 ) end
function not_ready_time_to_treasure() return not_ready_time( "start_treasure_time", 20 ) end
function starts_treasure_time()       start_time( "start_treasure_time" ) end
function actor_on_marsh()             return level.name() == "marsh" end
function actor_not_on_marsh()         return not actor_on_marsh() end
function podsumok_have()              return sak.have_items_count( "podsumok", 1 ) end
function podsumok_not_have()          return not podsumok_have() end
function have_razgruzka()             return sak.have_items_count( "razgruzka", 1 ) end
function not_have_razgruzka()         return not have_razgruzka() end

function actor_on_bar()
    if db.actor and level.name() == "l05_bar" then return true
    else return false end
end

function actor_punch( actor, npc )
    if db.actor:position():distance_to_sqr( npc:position() ) > 4 then return end
    dialogs.break_dialog( npc, actor, 0 )
    local active_item = db.actor:active_item()
    if active_item and active_item:section() ~= "bolt" and active_item:section() ~= "wpn_knife" then
        db.actor:drop_item( active_item )
    end
    set_inactivate_input_time( 30 )
    local snd_obj = xr_sound.get_safe_sound_object( [[affects\\hit_fist]] )
    snd_obj:play_no_feedback( db.actor, sound_object.s2d, 0, vector(), 1.0 )
    level.add_cam_effector( "camera_effects\\fusker.anm", 999, false, "" )
    level.add_pp_effector( "amk_shoot.ppe", 2011, false )
end

function shersh()
    db.actor:give_info_portion( "shersh" )
    start_time( "time_start_shersh" )
end

function add_marsh_treasure()
    local obj = amk.spawn_item( "marsh_inventory_box",
        vector():set( 486.28311157227, 3.3924994468689, 416.65158081055 ), 3564, 469516
    )
    level.map_add_object_spot( obj.id, "crlc_big_treasure3", "marsh_treasure" )
    misc.process_spawn()
    if obj then
        for _, v in ipairs({
            "wpn_sig550",
            "ammo_5.56x45_ap",
            "ammo_5.56x45_ap",
            "ammo_5.56x45_ap",
            "amk_zapiska_sak"
        }) do
            misc.spawn_to( v, obj )
        end
        sak.off_on( obj )
    end
end

function add_lost_treasure()
    local obj = amk.spawn_item( "rukzak_inventory_box",
        vector():set( 19.7, 9.73, 29.95 ), 3330, 19297
    )
    misc.process_spawn()
    if obj then
        for _, v in ipairs({
            "af_medus_new",
            "wpn_saiga12c_m2",
            "ammo_7.62x39_ap"
        }) do
            misc.spawn_to( v, obj )
        end
        sak.off_on( obj )
    end
end

function fill_hos_treasure()
    local obj = g_sim:story_object( story_ids.hos_treasure_1 )
    for a = 1, lua_random( 10, 20 ) do
        misc.spawn_to( "mixture", obj )
    end
    misc.spawn_to( "im_chain", obj )
    sak.off_on( obj )
end

function add_nagrad_pahon()
    sak.create_items( db.actor, "antirad",  3 + math.fmod( ( amk_vars.r_treas_items + timers.Get_Game_Days() ), 3 ) )
    sak.create_items( db.actor, "conserva", 4 + math.fmod( ( amk_vars.r_task_reward + timers.Get_Game_Days() ), 5 ) )
    timers.start_timer( "pahom_buzz_pause", 0, lua_random( 17, 24 ), 0 )
end

function off_kontainer()
    local a = nlc_vars.kontainer or 0
    if a == 0 then return end
    local obj = g_sim:object( a )
    if obj then g_sim:release( obj, true ) end
    nlc_vars.kontainer = nil
end

function add_red_sos_spot()
    level_tasks.add_location( 9801, "crlc_big", "red_sos_spot" )
end

function del_red_sos_spot()
    local obj = g_sim:story_object( story_ids.red_smart_sos_die )
    if obj then level.map_remove_object_spot( obj.id, "crlc_big" ) end
end

function add_val_escort_PDA_spot()
    level_tasks.add_location( 9802, "crlc_big", "val_escort_PDA_spot" )
end

function add_ryaboi_PDA_spot()
    level_tasks.add_location( 9564, "crlc_big", "ryaboi_PDA_spot" )
end

function give_amk_kanistra()
    sak_inventory.release_actor_items( "amk_kanistra", 1 )
end

function have_amk_kanistra()
    return sak.have_items_count( "amk_kanistra", 1 ) ~= false
end

function tm_find_item_1()
    return task_manager.Clua_randomTask:active_id_task( "tm_find_item_1" ) ~= false
end

function is_time_to_game()
    local minut = level.get_time_minutes()
    local hour  = level.get_time_hours()
    local t_g   = minut + hour
    if t_g >= 26 and t_g < 49 then
        return true
    else
        return false
    end
end

function is_no_time_to_game() return not is_time_to_game() end

function is_day()
    if level.get_time_hours() >= 6 and level.get_time_hours() < 21 then
        return true
    else
        return false
    end
end

function no_day() return not is_day() end

function is_holiday_prosha()
    local holidays = level.get_time_days()
    local shift    = 5
    for  i = 1, 7 do
        if holidays == shift * i then return true end
    end
    return false
end

function no_holiday_prosha() return not is_holiday_prosha() end

function is_holiday_sidor()
    local holidays = level.get_time_days()
    local shift    = 7
    for i = 1, 5 do
        if ( holidays >= ( shift * i - 1 ) and holidays < ( shift * i + 1 ) ) then return true end
    end
    return false
end

function no_holiday_sidor() return not is_holiday_sidor() end

function is_holiday_kuznezov()
    local shift    = 3
    local holidays = level.get_time_days()
    for i = 1, 10 do
        if ( holidays >= shift * ( i * 2 - 1 ) and holidays < shift * ( i * 2 ) ) then return true end
    end
    return false
end

function no_holiday_kuznezov() return not is_holiday_kuznezov() end

function is_holiday_petrenko()
    local shift    = 2
    local holidays = level.get_time_days()
    for i = 1, 10 do
        if ( holidays >= shift * ( i * 2 - 1 ) and holidays < shift * ( i * 2 ) ) then return true end
    end
    return false
end

function time_yan_psy()
    local rand = ( amk_vars.r_task_reward or 1 ) - 1
    nlc_vars.psy_antenna_good_time = rand
    if rand == 0 then
        db.actor:give_talk_message( "в полночь...", "ui\\ui_iconsTotal",
            Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
        )
    elseif rand == 1 then
        db.actor:give_talk_message( "в час ночи...", "ui\\ui_iconsTotal",
            Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
        )
    else
        db.actor:give_talk_message( "в " .. rand .. " часа ночи...", "ui\\ui_iconsTotal",
            Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
        )
    end
end

function del_time_yan_psy() nlc_vars.psy_antenna_good_time = nil end
--документы на радаре спавним отдельно
function clear_ready_time_yan_comp_repair()
    clear_ready_time( "time_start_yan_comp_repair" )
    amk.spawn_item( "rad_pda", sak.v3f( 530.7, -49.41, -241.61 ), 2061, 180657 )
end
--для спавна документов в рюкзак на радаре, вызываем из диалога с Сахаровым
function sak_document_radar()
    local obj = amk.spawn_item( "rukzak_inventory_box",
        sak.v3f( 349.999115, -51.753242, -24, 449068 ), 2031, 93051
    )
    misc.process_spawn()
    if obj then
        for _, v in ipairs({
            "medkit_scientic",
            "grenade_f1",
            "grenade_f1",
            "sak_document3"
        }) do
            misc.spawn_to( v, obj )
        end
        sak.off_on( obj )
    end
end

function time_rad_psy()
    local rand = ( amk_vars.r_task_reward or 1 ) + 16
    nlc_vars.psy_antenna_good_time = rand
    db.actor:give_talk_message( "Вечером, ближе к ночи - около " .. rand .. " часов...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end

function petruha_talk()
    local obj = g_sim:story_object( story_ids.esc_novice_attacker1 )
    if
        has_alife_info( "escape_factory_assault_say_hello" )
        or has_alife_info( "esc_kill_bandits_quest_kill" )
        or has_alife_info( "esc_petruha_great" )
    then
        return true
    else
        return false
    end
end

function have_x16_documents()
    return sak.have_items_count( "lab_x16_documents", 1 )
end

function not_have_x16_documents()
    if not have_x16_flash() and not have_x16_documents() then return true end
    return false
end

function add_redcatcher_albom_priz()
    local item = ""
    for i = 1, lua_random( 2, 5 ) do
        item = nagrad.level_2[ lua_random( table.getn( nagrad.level_2 ) ) ]
        sak.create_items( db.actor, item, lua_random( 1, 3 ) )
    end
end

function transfer_any_gun_from_actor( first_speaker, second_speaker )
    local npc = who_is_npc( first_speaker, second_speaker )
    for i, k in pairs( sak_inventory.rucksack ) do
        if
            strposx( i, "wpn_" )
            and not str_in_tab( i, { "_addon", "_knife", "_binoc" } )
        then
            local obj = client_obj( k[ 1 ] )
            if obj then
                local owner = obj:parent()
                if owner then
                    owner:transfer_item( obj, npc )
                    sak.relocate_item( db.actor, "out", i, 1 )
                    break
                end
            end
        end
    end
    sak_inventory.need_update_inventory()
end

function have_actor_any_gun()
    for i, k in pairs( sak_inventory.rucksack ) do
        if
            strposx( i, "wpn_" )
            and not str_in_tab( i, { "_addon", "_knife", "_binoc" } )
        then
            return true
        end
    end
end
-- автоматы Небову
local is_ak_actor = {
    [ "wpn_ak74"        ] = true,
    [ "wpn_ak74_old"    ] = true,
    [ "wpn_ak74m"       ] = true,
    [ "wpn_rpk74"       ] = true,
    [ "wpn_ak74pbn"     ] = true
}
-- TODO: добавить проверку на кондицию автомата
function have_actor_any_ak()
    for i, k in pairs( sak_inventory.rucksack ) do
        if
            is_ak_actor[ i ]
            and #k > 0
            and test.have_with_cond( i, 1, 0.95, true )
        then
            return true
        end
    end
end

function transfer_any_ak_from_actor( first_speaker, second_speaker )
    local npc = who_is_npc( first_speaker, second_speaker )
    for i, k in pairs( sak_inventory.rucksack ) do
        if is_ak_actor[ i ] and #k > 0 then
            local obj = client_obj( k[ 1 ] )
            if obj then
                local owner = obj:parent()
                if owner then
                    owner:transfer_item( obj, npc )
                    sak.relocate_item( db.actor, "out", i, 1 )
                    break
                end
            end
        end
    end
    sak_inventory.need_update_inventory()
end
-- для диалога с часовым на входе свободы, притащить 2 мины.
function have_2_mines() return false end
function give_2_mines() end

function out_wpn_esc_actor()  out_wpn_actor( 9140 ) end
function add_wpn_esc_actor()  add_wpn_actor( 9140 ) end
function out_wpn_from_actor() out_wpn_actor( 5862 ) end
function add_wpn_in_actor()   add_wpn_actor( 5862 ) end

function out_wpn_actor( sid )
    local in_object  = level_object_by_sid( sid )
    local out_object = db.actor
    for i, k in pairs( sak_inventory.slots ) do
        if ( strpos( i, "wpn_", 1, true ) and ( i ~= "wpn_binoc" ) and ( i ~= "bolt" ) ) then
            if ( i == "wpn_knife" and has_alife_info( "mil_freedom_good" ) ) then
            else
                local item = client_obj( k[ 1 ] )
                out_object:transfer_item( item, in_object )
                sak.relocate_item( db.actor, "out", i, 1 )
            end
        end
    end
    for i, k in pairs( sak_inventory.rucksack ) do
        if strpos( i, "wpn_", 1, true ) then
            for j = 1, #k do
                local item = client_obj( k[ j ] )
                out_object:transfer_item( item, in_object )
            end
            sak.relocate_item( db.actor, "out", i, #k )
        elseif strpos( i, "rucksack", 1, true ) then
            for a = 1, #k do
                local o_id     = k[ a ]
                local ids, cnt = registry.inv_objects( o_id, false )
                for n = 1, cnt do
                    local id   = ids[ n ]
                    local item = client_obj( id )
                    if item then
                        local sect = item:section()
                        if strpos( sect, "wpn_", 1, true ) then
                            out_object:transfer_item( item, in_object )
                            sak.relocate_item( db.actor, "out", sect, 1 )
                        end
                    end
                end
            end
        end
    end
    sak.off_on( in_object )
end

function add_wpn_actor( sid )
    local out_object = level_object_by_sid( sid )
    local in_object  = db.actor
    local ids, cnt   = registry.inv_objects( out_object:id(), true )
    for n = 1, cnt do
        local id   = ids[ n ]
        local sobj = client_obj( id )
        if sobj then
            out_object:transfer_item( sobj, in_object )
            sak.relocate_item( db.actor, "in", sobj:section(), 1 )
        end
    end
end

function have_any_aart()
    for i = 1, table.getn( table_aart ) do
        if sak.have_items_count( table_aart[ i ], 1 ) then return true end
    end
    return false
end

function have_dram_aart()
    for i = 1, table.getn( table_aart ) do
        if sak.have_items_count( table_aart[ i ], 1, true ) then return true end
    end
    return false
end

function transfer_any_aart()
    for i = 1, table.getn( table_aart ) do
        if sak.have_items_count( table_aart[ i ], 1 ) then
            sak_inventory.release_actor_items( table_aart[ i ], 1 )
            return
        end
    end
    wprintf( "~C0C #ERROR:~C07 no artefacts 1-st level removed" )
    return false
end

function have_any_bart()
    for i = 1, table.getn( table_bart ) do
        if sak.have_items_count( table_bart[ i ], 1 ) then return true end
    end
    return false
end

function have_dram_bart()
    for i = 1, table.getn( table_bart ) do
        if sak.have_items_count( table_bart[ i ], 1, true ) then return true end
    end
    return false
end

function have_bart()
    for i = 1, table.getn( table_bart ) do
        if sak.have_items_count( table_bart[ i ], 1 ) then return true end
    end
    return false
end

function transfer_any_bart()
    for i = 1, table.getn( table_bart ) do
        if sak.have_items_count( table_bart[ i ], 1 ) then
            sak_inventory.release_actor_items( table_bart[ i ], 1 )
            break
        end
    end
end

function have_any_cart()
    for i = 1, table.getn( table_cart ) do
        if sak.have_items_count( table_cart[ i ], 1, false, true ) then return true end
    end
    return false
end

function have_dram_cart()
    for i = 1, table.getn( table_cart ) do
        if sak.have_items_count( table_cart[ i ], 1, true ) then return true end
    end
    return false
end

function have_cart()
    for i = 1, table.getn( table_cart ) do
        if sak.have_items_count( table_cart[ i ], 1, false, true ) then return true end
    end
    return false
end

function transfer_any_cart()
    for i = 1, table.getn( table_cart ) do
        if sak.have_items_count( table_cart[ i ], 1 ) then
            sak_inventory.release_actor_items( table_cart[ i ], 1 )
            break
        end
    end
end

function have_any_dart()
    for i = 1, table.getn( table_dart ) do
        if sak.have_items_count( table_dart[ i ], 1, false, true ) then return true end
    end
    return false
end

function have_dram_dart()
    for i = 1, table.getn( table_dart ) do
        if sak.have_items_count( table_dart[ i ], 1, true ) then return true end
    end
    return false
end

function have_dart()
    for i = 1, table.getn( table_dart ) do
        if sak.have_items_count( table_dart[ i ], 1, false, true ) then return true end
    end
    return false
end

function transfer_any_dart()
    for i = 1, table.getn( table_dart ) do
        if sak.have_items_count( table_dart[ i ], 1 ) then
            sak_inventory.release_actor_items( table_dart[ i ], 1 )
            break
        end
    end
end

function dart_full_have()
    for i = 1, #table_dart do
        for kk, k in pairs( sak_inventory.rucksack ) do
            if strpos( kk, table_dart[ i ], 1, true ) and not strpos( kk, "_capsule", 1, true ) then
                local kol = #k
                for m = 1, kol do
                    local obj = g_sim:object( k[ m ] )
                    if obj then
                        local pk   = get_netpk( obj, 1 )
                        local data = pk:get()
                        local cond = data.condition
                        if cond > 0.95 then return true end
                    end
                end
            end
        end
    end
    return false
end

function transfer_dart_full()
    for i = 1, #table_dart do
        for kk, k in pairs( sak_inventory.rucksack ) do
            if strpos( kk, table_dart[ i ], 1, true ) and not strpos( kk, "_capsule", 1, true ) then
                local kol = #k
                for m = 1, kol do
                    local obj = g_sim:object( k[ m ] )
                    if obj then
                        local pk   = get_netpk( obj, 1 )
                        local data = pk:get()
                        local cond = data.condition
                        if cond > 0.95 then misc.release_obj( obj, 'script:3788' )
                        sak.relocate_item( db.actor, "out", table_dart[ i ], 1 )
                        end
                    end
                end
            end
        end
    end
end

function treasure_any_capsule()
    return table_capsule[ lua_random( 1, #table_capsule ) ]
end

function any_cart_capsule()
    return table_capsule[ lua_random( 1, math.floor( #table_capsule / 2 ) ) ]
end

function have_any_capsule()
    for i = 1, table.getn( table_capsule ) do
        if sak.have_items_count( table_capsule[ i ], 1 ) then return true end
    end
    return false
end

function have_dram_capsule()
    for i = 1, table.getn( table_capsule ) do
        if sak.have_items_count( table_capsule[ i ], 1, true ) then return true end
    end
    return false
end

function have_capsule()
    for i = 1, table.getn( table_capsule ) do
        if sak.have_items_count( table_capsule[ i ], 1 ) then return true end
    end
    return false
end

function transfer_any_capsule()
    local section
    for i = 1, table.getn( table_capsule ) do
        if sak.have_items_count( table_capsule[ i ], 1 ) then
            for ii, kk in pairs( sak_inventory.rucksack ) do
                if strpos( ii, table_capsule[ i ], 1, true ) then
                    section = tostring( ii )
                end
            end
            sak_inventory.release_actor_items( table_capsule[ i ], 1 )
            nlc_vars.capsule_ready = section
            break
        end
    end
end

function transfer_any_capsule_simple()
    for i = 1, table.getn( table_capsule ) do
        if sak.have_items_count( table_capsule[ i ], 1 ) then
            sak_inventory.release_actor_items( table_capsule[ i ], 1 )
            break
        end
    end
end

function have_any_red_art()
    for i = 1, table.getn( table_red_art ) do
        if sak.have_items_count( table_red_art[ i ], 1, false, true ) then return true end
    end
    return false
end

function transfer_any_red_art()
    for i = 1, table.getn( table_red_art ) do
        if sak.have_items_count( table_red_art[ i ], 1 ) then
            sak_inventory.release_actor_items( table_red_art[ i ], 1 )
            break
        end
    end
end

function have_any_green_art()
    for i = 1, table.getn( table_green_art ) do
        if sak.have_items_count( table_green_art[ i ], 1, false, true ) then return true end
    end
    return false
end

function transfer_any_green_art()
    for i = 1, table.getn( table_green_art ) do
        if sak.have_items_count( table_green_art[ i ], 1 ) then
            sak_inventory.release_actor_items( table_green_art[ i ], 1 )
            break
        end
    end
end

function out_item_section_from_actor( first_speaker, second_speaker, section, amount )
    local npc   = who_is_npc  ( first_speaker, second_speaker )
    local actor = who_is_actor( first_speaker, second_speaker )
    local i     = 0
    if not amount then amount = 1 end
    local   function transfer_object_item( temp, item )
                local vItemSection = item:section()
                if ( strpos( vItemSection, "^"..section ) and i ~= 0 ) then
                    amk.remove_item_from_inventory( item, actor )
                    i = i - 1
                end
            end
    if amount == "all" then
        i = -1
        actor:iterate_inventory( transfer_object_item, nil )
        amount = ( i + 1 ) * ( -1 )
        i = 0
    elseif amount > 1 then
        i = amount
        actor:iterate_inventory( transfer_object_item, nil )
    elseif amount < 1 then
    else
        amk.remove_item_from_inventory( actor:object( section ), actor )
    end
    sak.relocate_item( db.actor, "out", section, amount - i )
    return ( amount - i )
end

function relocate_item_section_from_actor( first_speaker, second_speaker, section, amount )
    local npc   = who_is_npc  ( first_speaker, second_speaker )
    local actor = who_is_actor( first_speaker, second_speaker )
    local i     = 0
    if not amount then amount = 1 end
    local   function transfer_object_item( temp, item )
                local vItemSection = item:section()
                if ( strpos( vItemSection, section, 1, true ) and i ~= 0 ) then
                    db.actor:transfer_item( item, npc )
                    i = i - 1
                end
            end
    if amount == "all" then
        i = -1
        actor:iterate_inventory( transfer_object_item, nil )
        amount = ( i + 1 ) * ( -1 )
        i = 0
    elseif amount > 1 then
        i = amount
        actor:iterate_inventory( transfer_object_item, nil )
    elseif amount < 1 then
    else
        actor:transfer_item( actor:object( section ), npc )
    end
    sak.relocate_item( db.actor, "out", section, amount - i )
end

function who_is_npc( first_speaker, second_speaker )
    local npc = second_speaker
    if db.actor:id() == npc:id() then npc = first_speaker end
    return npc
end

function who_is_actor( first_speaker, second_speaker )
    local npc = second_speaker
    if db.actor:id() ~= npc:id() then npc = first_speaker end
    return npc
end

function on_chimera_kill( obj, who )
    local id = obj:id()
    if math.fmod( id, 20 ) == 0 then
        amk.spawn_item_in_inv( "mutant_chimera_kogot", obj )
    end
    if math.fmod( id, 30 ) == 0 then
        amk.spawn_item_in_inv( "mutant_chimera_kogot", obj )
    end
    if math.fmod( id, 40 ) == 0 then
        amk.spawn_item_in_inv( "mutant_chimera_kogot", obj )
    end
end

function on_boar_kill( obj, who )
    local id = obj:id()
    if math.fmod( id, 20 ) == 0 then
        misc.spawn_to( "mutant_boar_leg", obj )
    end
    if math.fmod( id, 30 ) == 0 then
        misc.spawn_to( "mutant_boar_leg", obj )
    end
    if math.fmod( id, 40 ) == 0 then
        misc.spawn_to( "mutant_boar_leg", obj )
    end
end

function on_burer_kill( obj, who )
    if
        obj == nil
        --or level.name() == "l08u_brainlab"
        --or level.name() == "lost_village"
    then
        return
    end
    local obj_sect = obj:section()
    if obj_sect == "burer_hos" then
        amk.spawn_item_in_inv( "mfake_af_dummy_fire", obj )
        return
    end
    local id      = obj:id()
    local section = ""
    if math.fmod( id, 4 ) == 0 then
        local b_rnd = dsh.get_next_random( "on_burer_kill" )
        if     b_rnd > 0.95 then
            section = "af_medus_new"
        else
            section = table_aart[ dsh.get_next_random( "on_burer_kill", 1, #table_aart ) ]
        end 
        local b = dsh.get_next_random( "on_burer_kill", 1, 5 )
        if not strpos( section, "_new", 1, true ) and not strpos( section, "_dummy_", 1, true ) then
            section = "mfake_" .. section .. "_dyn" .. b .. "d"
        elseif strpos( section, "af_medus_new", 1, true ) then
            section = "mfake_" .. section
        end
        amk.spawn_item_in_inv( section, obj )
        return
    end
    if math.fmod( id, 10 ) == 0 then
        amk.spawn_item_in_inv( "mutant_burer_hand", obj )
    end
end

function on_flesh_strong_kill( obj, who )
    if obj == nil or not db.actor:has_info( "dsc_greens_flesh_shkura" ) then return end
    if math.fmod( obj:id(), 2 ) == 0 then
    return amk.spawn_item_in_inv( "mutant_flesh_shkura", obj )
    end
end

function have_val_dram_1()
    return
    have_dram_capsule() ~= false
    or have_dram_dart() ~= false
    or have_dram_cart() ~= false
    or have_dram_bart() ~= false
end

function give_val_dram_1( first_speaker, second_speaker )
    for i = 1, table.getn( table_capsule ) do
        if sak.have_items_count( table_capsule[ i ], 1, true ) then
            out_item_section_from_actor( first_speaker, second_speaker, table_capsule[ i ], "all" )
        end
    end
    for i = 1, table.getn( table_dart ) do
        if sak.have_items_count( table_dart[ i ], 1, true ) then
            out_item_section_from_actor( first_speaker, second_speaker, table_dart[ i ], "all" )
        end
    end
    for i = 1, table.getn( table_cart ) do
        if sak.have_items_count( table_cart[ i ], 1, true ) then
            out_item_section_from_actor( first_speaker, second_speaker, table_cart[ i ], "all" )
        end
    end
    for i = 1, table.getn( table_bart ) do
        if sak.have_items_count( table_bart[ i ], 1, true ) then
            out_item_section_from_actor( first_speaker, second_speaker, table_bart[ i ], "all" )
        end
    end
end

function have_val_dram_2( first_speaker, second_speaker )
    return
    have_dram_capsule()  == false
    and have_dram_dart() == false
    and have_dram_cart() == false
    and have_dram_bart() == false
    and have_dram_aart() ~= false
end

function give_val_dram_2( first_speaker, second_speaker )
    local bablo = db.actor:money()
    for i = 1, table.getn( table_aart ) do
        if sak.have_items_count( table_aart[ i ], 1, true ) then
            out_item_section_from_actor( first_speaker, second_speaker, table_aart[ i ], "all" )
        end
    end
    bablo = ( bablo - math.floor( bablo / 2 ) )
    relocate_money( db.actor, bablo, 1 )
end

function have_val_dram_3( first_speaker, second_speaker )
    return
        have_dram_capsule()  == false
        and have_dram_dart() == false
        and have_dram_cart() == false
        and have_dram_bart() == false
        and have_dram_aart() == false
        and(
            sak.have_items_count   ( "arc_art_box_1basic", 1 ) ~= false
            or sak.have_items_count( "arc_art_box_basic",  1 ) ~= false
            or sak.have_items_count( "arc_art_box_8basic", 1 ) ~= false
        )
end

function give_val_dram_3( first_speaker, second_speaker )
    local bablo = db.actor:money()
    for i = 1, table.getn( table_container ) do
        local obj = db.actor:object( table_container[ i ] )
        if obj then
            relocate_item_section_from_actor( first_speaker, second_speaker, table_container[ i ], "all" )
        end
    end
    for i = 1, table.getn( table_food ) do
        local obj = db.actor:object( table_food[ i ] )
        if obj then
            out_item_section_from_actor( first_speaker, second_speaker, table_food[ i ], "all" )
        end
    end
    bablo = ( bablo - math.floor( bablo / 5 ) )
    relocate_money( db.actor, bablo, 1 )
end

function have_val_dram_4( first_speaker, second_speaker )
    return
        have_dram_capsule()  == false
        and have_dram_dart() == false
        and have_dram_cart() == false
        and have_dram_bart() == false
        and have_dram_aart() == false
        and sak.have_items_count( "arc_art_box_1basic", 1 ) == false
        and sak.have_items_count( "arc_art_box_basic",  1 ) == false
        and sak.have_items_count( "arc_art_box_8basic", 1 ) == false
end

function give_val_dram_4( first_speaker, second_speaker )
    local bablo = db.actor:money()
    for i = 1, table.getn( table_food ) do
        local obj = db.actor:object( table_food[ i ] )
        if obj then
            out_item_section_from_actor( first_speaker, second_speaker, table_food[ i ], "all" )
        end
    end
    bablo = ( bablo - math.floor( bablo / 8 ) )
    relocate_money( db.actor, bablo, 1 )
end

local dist_item_from_dv = 150
-- чистка нычек при общении с Рашпилем? Выключено?
function out_item_from_dv()
    for a = 1000, 45000, 1 do
        local obj = g_sim:object( a )
        if obj then
            local posobj   = obj.position
            local actorpos = db.actor:position()
            local npc_name = obj:name()
            if posobj:distance_to( actorpos ) < dist_item_from_dv then
                if(
                    obj.parent_id
                    and obj.parent_id ~= 0
                    and(
                        obj.parent_id == BAD_OBJ_ID
                        or g_sim:object( obj.parent_id ):section_name() == "rucksack"
                        or g_sim:object( obj.parent_id ):section_name() == "inventory_box"
                        or g_sim:object( obj.parent_id ):section_name() == "m_inventory_box"
                    )
                    or(
                        IsStalker( g_sim:object( obj.parent_id ) )
                        and g_sim:object( obj.parent_id ).alive
                        and not g_sim:object( obj.parent_id ):alive() )
                    )
                    and(
                        strpos( obj:section_name(), "af_", 1, true )
                        or strpos( obj:section_name(), "arc_art_box_", 1, true )
                        or strpos( obj:section_name(), "ammo_", 1, true )
                    )
                then
                    g_sim:release( obj, true )
                end
            end
        end
    end
end

function add_stalker_letter() sak.create_items( db.actor, "stalker_letter", 1 ) end
function add_kruglov_letter() sak.create_items( db.actor, "kruglov_letter", 1 ) end

function add_esc_mil_habar()
    local obj = g_sim:story_object( story_ids.esc_blokpost_box_01 ) or g_sim:story_object( story_ids.esc_inventory_box_0018 )
    if not obj then return end
    for _, v in ipairs({ "wpn_abakan", "wpn_addon_grenade_launcher" }) do
        misc.spawn_to( v, obj )
    end
    for _, v in ipairs({ "suhpay", "medkit_army", "grenade_rgd5" }) do
        for i = 1, 3 do misc.spawn_to( v, obj ) end
    end
    for _, v in ipairs({ "ammo_vog-25", "ammo_5.45x39_ap" }) do
        for i = 1, 10 do misc.spawn_to( v, obj ) end
    end
    sak.off_on( obj )
end

function add_mil_nagrad_medkit()
    local tbl = { "medkit_army", "antirad" }
    for i = 1, dsh.get_next_random( "sak_dialog.add_mil_nagrad", 2, 4 ) do
        sak.create_items( db.actor, tbl[ dsh.get_next_random( "sak_dialog.add_mil_nagrad", #tbl ) ], 1 )
    end
end

function add_mil_nagrad_ammo()
    local tbl = { "ammo_5.45x39_ap", "ammo_vog-25" }
    for i = 1, dsh.get_next_random( "sak_dialog.add_mil_nagrad", 2, 4 ) do
        sak.create_items( db.actor, tbl[ dsh.get_next_random( "sak_dialog.add_mil_nagrad", #tbl ) ], 1 )
    end
end

function add_habar_for_borov()
    local obj = g_sim:story_object( story_ids.agr_inventory_box_0029 )
    for i = 1, lua_random( 8, 15 ) do
        misc.spawn_to( nagrad.level_7[ lua_random( table.getn( nagrad.level_7 ) ) ], obj )
    end
    for _, v in ipairs({ "dollars50", "dollars50", "dollars50", "dollars50", "letter_for_borov" }) do
        misc.spawn_to( v, obj )
    end
end

function add_habar_for_borov2()
    local obj = g_sim:story_object( story_ids.agr_inventory_box_0029 )
    for i = 1, lua_random( 10, 20 ) do
        misc.spawn_to( nagrad.level_6[ lua_random( table.getn( nagrad.level_6 ) ) ], obj )
    end
    for _, v in ipairs({ "dollars25", "dollars25", "dollars25", "dollars25", "letter_for_borov" }) do
        misc.spawn_to( v, obj )
    end
end

function add_voron_monster_part_1()
    local item  = ""
    local count = lua_random( 2, 3 )
    for i = 1, count do
        item = nagrad.level_1[ lua_random( table.getn( nagrad.level_1 ) ) ]
        sak.create_items( db.actor, item, 1 )
    end
    for k = 1, 5 do
        local nom = k
        if nom ~= 1 then
            db.actor:disable_info_portion( "voron_monster_part_" .. nom .. "_info" )
        end
    end
end

function add_voron_monster_part_2()
    local item  = ""
    local count = lua_random( 3, 4 )
    for i = 1, count do
        item = nagrad.level_2[ lua_random( table.getn( nagrad.level_2 ) ) ]
        sak.create_items( db.actor, item, 1 )
    end
    for k = 1, 5 do
        local nom = k
        if nom ~= 2 then
            db.actor:disable_info_portion( "voron_monster_part_" .. nom .. "_info" )
        end
    end
end

function add_voron_monster_part_3()
    local item  = ""
    local count = lua_random( 3, 5 )
    for i = 1, count do
        item = nagrad.level_3[ lua_random( table.getn( nagrad.level_3 ) ) ]
        sak.create_items( db.actor, item, 1 )
    end
    for k = 1, 5 do
        local nom = k
        if nom ~= 3 then
            db.actor:disable_info_portion( "voron_monster_part_" .. nom .. "_info" )
        end
    end
end

function add_voron_monster_part_4()
    local item  = ""
    local count = lua_random( 4, 5 )
    for i = 1, count do
        item = nagrad.level_4[ lua_random( table.getn( nagrad.level_4 ) ) ]
        sak.create_items( db.actor, item, 1 )
    end
    for k = 1, 5 do
        local nom = k
        if nom ~= 4 then
            db.actor:disable_info_portion( "voron_monster_part_" .. nom .. "_info" )
        end
    end
end

function add_voron_monster_part_5()
    local item  = ""
    local count = lua_random( 4, 6 )
    for i = 1, count do
        item = nagrad.level_5[ lua_random( table.getn(nagrad.level_5 ) ) ]
        sak.create_items( db.actor, item, 1 )
    end
    for k = 1, 5 do
        local nom = k
        if nom ~= 5 then
            db.actor:disable_info_portion( "voron_monster_part_" .. nom .. "_info" )
        end
    end
end

function clear_ready()
    nlc_vars.time_start = nil
    nlc_vars.wpntip     = nil
end

function give_antirad_muller( first_speaker, second_speaker )
    local npc = who_is_npc( first_speaker, second_speaker )
    vergas_lib.search_items( "antirad", 2, 2 )
    amk.spawn_item_in_inv( "medkit", npc )
    xr_wounded.unlock_medkit( npc )
end

function give_medkit_kozel( first_speaker, second_speaker )
    local npc = who_is_npc( first_speaker, second_speaker )
    amk.spawn_item_in_inv( "medkit", npc )
    xr_wounded.unlock_medkit( npc )
end

function have_eye()     return sak.have_items_count( "af_eye", 1 ) ~= false end
function give_eye()     sak_inventory.release_actor_items( "af_eye", 1 ) end
function have_pusirek() return sak.have_items_count( "af_dummy_fire", 1 ) ~= false end
function give_pusirek() sak_inventory.release_actor_items( "af_dummy_fire", 1 ) end

function have_som_mutant_face_tushkano()
    local kol = 2 + math.ceil( sak.day_money / 20 )
    return sak.have_items_count( "mutant_face_tushkano", kol ) ~= false
end

function give_som_mutant_face_tushkano()
    local kol = 2 + math.ceil( sak.day_money / 20 )
    sak_inventory.release_actor_items( "mutant_face_tushkano", kol )
end

function have_dog_tail_boar_leg()
    return
        sak.have_items_count( "mutant_dog_tail", 1 ) ~= false
        and sak.have_items_count( "mutant_boar_leg", 1 ) ~= false
end

function give_dog_tail_boar_leg()
    sak_inventory.release_actor_items( "mutant_dog_tail", 1 )
    sak_inventory.release_actor_items( "mutant_boar_leg", 1 )
end

function have_som_mutant_dog_tail()
    local kol = math.ceil( sak.day_money / 10 )
    return sak.have_items_count( "mutant_dog_tail", kol ) ~= false
end

function give_som_mutant_dog_tail()
    local kol = math.ceil( sak.day_money / 10 )
    sak_inventory.release_actor_items( "mutant_dog_tail", kol )
end

function have_som_mutant_boar_leg()
    local kol = math.ceil( sak.day_money / 20 )
    return sak.have_items_count( "mutant_boar_leg", kol ) ~= false
end

function give_som_mutant_boar_leg()
    local kol = math.ceil( sak.day_money / 20 )
    sak_inventory.release_actor_items( "mutant_boar_leg", kol )
end

function have_mutant_e_chimera_kidney()
    return sak.have_items_count( "mutant_e_chimera_kidney", 1 ) ~= false
end

function give_mutant_e_chimera_kidney()
    sak_inventory.release_actor_items( "mutant_e_chimera_kidney", 1 )
end

function have_gar_dram_novice_mutant_hand()
    if
           sak.have_items_count( "mutant_chimera_kogot",  1 ) ~= false
        or sak.have_items_count( "mutant_krovosos_jaw",   1 ) ~= false
        or sak.have_items_count( "mutant_burer_hand",     1 ) ~= false
        or sak.have_items_count( "mutant_hand_kontroler", 1 ) ~= false
    then
        return true
    end
    return false
end

function greens_have_kolbasa()
    local day      = timers.Get_Game_Days() or 1
    local kolb_max = dsh.get_fixed_random( "sak_dialog.greens_have_kolbasa", day, 2, 5 )
    local id       = ( nlc_vars.greens_kolbasa or 0 )
    wprintf( "@-------------------  [ %s.script ] DAY: %s   KOLB_MAX: %s  -----------------@", script_name(), day, kolb_max )
    if id <= kolb_max then return true end
    return false
end

function greens_not_have_kolbasa() return not greens_have_kolbasa() end

-- ТОВАРИЩИ! СКАЖЕМ ДРУЖНОЕ "НЕТ!!" НАМАЗКЕ ЭКЗ НА БОЛОТАХ!!!!!
function upgrade_outfit_precond( trader, actor )
    local item_in_slot_6 = actor_active_item( 6 )
    if
        item_in_slot_6 ~= nil
        and not str_in_tab( item_in_slot_6:section(),
            { "bandit_veteran_", "bandit_master_", "super_", "exo" }
        )
    then
        return true
    else
        return false
    end
end

function upgrade_ok_precond( first_speaker, second_speaker )
    local id = nlc_vars.upgrade_item or 0
    if id == 0 then return false end
    local obj = g_sim:object( id )
    if obj then
        local section = obj:section_name()
        local item    = first_speaker:object( section )
        if item then return true end
    end
    return false
end

function upgrade_not_ok_precond( first_speaker, second_speaker )
    return not upgrade_ok_precond( first_speaker, second_speaker )
end

function give_upgrade_outfit( first_speaker, second_speaker )
    local obj = first_speaker:item_in_slot( 6 )
    first_speaker:transfer_item( obj, second_speaker )
    nlc_vars.upgrade_item = obj:id()
    news_manager.relocate_item( db.actor, "out", obj:section() )
end

function return_upgrade_outfit( first_speaker, second_speaker )
    local id = nlc_vars.upgrade_item or 0
    if id == 0 then return end
    local obj = g_sim:object( id )
    if obj then
        local section = obj:section_name()
        local item    = first_speaker:object( section )
        if item then
            first_speaker:transfer_item( item, second_speaker )
            sak.relocate_item( second_speaker, "in", section, 1 )
            if not strpos( section, "_q_", 1, true ) then
                local new = string.gsub( section, "_", "_q_" )
                coord_params.set_obj_section( id, new )
            end
            local rand = lua_random( 2, 5 )
            local hour = math.floor( 40 / rand )
            if strposx( section, "exo" ) then
                local actor = db.actor
                rand, hour  = 0, 0
                if
                    str_in_tab( section, {
                        "exo_q_outfit",
                        "exo_outfit",
                        "monolit_q_exoskeleton",
                        "monolit_exoskeleton"
                    })
                then                                      -- экза нейтралов и монолита работает на 12-16ч дольше
                    hour = lua_random( 12, 16 )
                end
                if actor:has_info( "exo_charge_half_done" ) then
                    rand = 2
                    actor:disable_info_portion( "exo_charge_half_done" )
                elseif actor:has_info( "exo_charge_full_done" ) then
                    rand = 4
                    actor:disable_info_portion( "exo_charge_full_done" )
                end
            end
            wprintf( "@------------ downgrade timer:   days: %s, hours: %s", rand, hour )
            timers.start_timer( "upgrade" .. id, rand, hour, 21, "sak_dialog.downgrade_item("..id..")" )
        end
    end
    nlc_vars.upgrade_item = nil
    timers.start_timer( "bron_safe_rel", 10 )
end

function downgrade_item( id )
    local obj = g_sim:object( id )
    if obj then
        local section = obj:section_name()
        if strpos( section, "_q_", 1, true ) then
            local new = string.gsub( section, "_q_", "_" )
            coord_params.set_obj_section( id, new )
        end
    end
end

function upgrade_weapon_precond( trader, actor )
    local item_in_slot_1 = actor_active_item( 1 )
    local item_in_slot_2 = actor_active_item( 2 )
    if item_in_slot_1 or item_in_slot_2 then return true
    else return false
    end
end

function give_upgrade_weapon( first_speaker, second_speaker )
    local item_in_slot_1 = actor_active_item( 1 )
    local item_in_slot_2 = actor_active_item( 2 )
    if item_in_slot_2 then
        first_speaker:transfer_item( item_in_slot_2, second_speaker )
        nlc_vars.upgrade_item = item_in_slot_2:id()
        news_manager.relocate_item( db.actor, "out", item_in_slot_2:section() )
    elseif item_in_slot_1 then
        first_speaker:transfer_item( item_in_slot_1, second_speaker )
        nlc_vars.upgrade_item = item_in_slot_1:id()
        news_manager.relocate_item(db.actor, "out", item_in_slot_1:section())
    end
end

function havent_voron_find_item_start()
    if
           db.actor:has_info( "voron_find_item_1_start" )
        or db.actor:has_info( "voron_find_item_2_start" )
        or db.actor:has_info( "voron_find_item_3_start" )
        or db.actor:has_info( "voron_find_item_4_start" )
        or db.actor:has_info( "voron_find_item_5_start" )
    then
        return false
    else
        return true
    end
end

function have_voron_find_item_start()
    if
           db.actor:has_info( "voron_find_item_1_start" )
        or db.actor:has_info( "voron_find_item_2_start" )
        or db.actor:has_info( "voron_find_item_3_start" )
        or db.actor:has_info( "voron_find_item_4_start" )
        or db.actor:has_info( "voron_find_item_5_start" )
    then
        return true
    else
        return false
    end
end

function have_voron_find_item_1() return sak.have_items_count( "kartina04", 1          ) ~= false end
function have_voron_find_item_2() return sak.have_items_count( "ventilator_01", 1      ) ~= false end
function have_voron_find_item_3() return sak.have_items_count( "item_battery_02", 1    ) ~= false end
function have_voron_find_item_4() return sak.have_items_count( "klyk_pribor_1c", 1     ) ~= false end
function have_voron_find_item_5() return sak.have_items_count( "item_psi_helmet_01", 1 ) ~= false end
function give_voron_find_item_1() sak_inventory.release_actor_items( "kartina04", 1          ) end
function give_voron_find_item_2() sak_inventory.release_actor_items( "ventilator_01", 1      ) end
function give_voron_find_item_3() sak_inventory.release_actor_items( "item_battery_02", 1    ) end
function give_voron_find_item_4() sak_inventory.release_actor_items( "klyk_pribor_1c", 1     ) end
function give_voron_find_item_5() sak_inventory.release_actor_items( "item_psi_helmet_01", 1 ) end

function add_voron_find_item_2_done()
    sak.create_items( db.actor, "ammo_vog-25",  6 )
    sak.create_items( db.actor, "grenade_rgd5", 3 )
end

function add_voron_find_item_3_done()
    sak.create_items( db.actor, "ammo_vog-25",  6 )
    sak.create_items( db.actor, "grenade_f1",   2 )
    sak.create_items( db.actor, "grenade_rgd5", 2 )
end

function add_voron_find_item_4_done()
    sak.create_items( db.actor, "ammo_vog-25",  8 )
    sak.create_items( db.actor, "grenade_f1",   3 )
    sak.create_items( db.actor, "grenade_rgd5", 5 )
end

function add_voron_find_item_5_done()
    sak.create_items( db.actor, "ammo_vog-25",  8 )
    sak.create_items( db.actor, "grenade_f1",   4 )
    sak.create_items( db.actor, "grenade_rgd5", 4 )
end

function have_harmonica() return sak.have_items_count( "harmonica_b", 1 ) ~= false end
function give_harmonica() sak_inventory.release_actor_items( "harmonica_b", 1 ) end

function add_some_ammo_to_actor( som, sect )
    local actor         = db.actor
    local batch_default = vergas_lib.get_box_size( sect ) or 10
    local kol   = 1 + math.ceil( som - ( math.ceil( sak.day_money / 15 ) ) * ( som / 10 ) )
    if kol <= 0 then kol = 1 end
    local count  = kol
    local pachka = 0
    while kol > batch_default do
        kol    = kol - batch_default
        pachka = pachka + 1
    end
    if pachka > 0 then
        for i = 1, pachka do
            g_sim:create( sect,
                actor:position(), actor:level_vertex_id(), actor:game_vertex_id(), actor:id()
            )
        end
    end
    if count > ( batch_default * pachka ) then
        g_sim:create_ammo( sect,
            actor:position(), actor:level_vertex_id(), actor:game_vertex_id(), actor:id(),
            ( count - ( batch_default * pachka ) )
        )
    end
    local task_texture, task_rect = get_texture_info( "ui_iconsTotal_found_thing" )
    local news_text = "%c[255,1,255,1]" .. game.translate_string( "general_in_item" )
        .. "\\n" .. "%c[default] " .. count .. " патронов."
    actor:give_talk_message( news_text, task_texture, task_rect, "iconed_answer_item" )
end

function add_zink_ammo_5x45()
    local npc = db.actor
    for i = 1, 36 do
        g_sim:create( "ammo_5.45x39_fmj",
            npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id()
        )
    end
    local task_texture, task_rect = get_texture_info( "ui_iconsTotal_found_thing" )
    local news_text = "%c[255,1,255,1]" .. game.translate_string( "general_in_item" )
        .. "\\n" .. "%c[default] Цинк патронов 5x45."
    npc:give_talk_message( news_text, task_texture, task_rect, "iconed_answer_item" )
end

function add_zink_ammo_7x62()
    local npc = db.actor
    for i = 1, 23 do
        g_sim:create( "ammo_7.62x39_fmj",
            npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id()
        )
    end
    g_sim:create_ammo( "ammo_7.62x39_fmj",
        npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id(), 10
    )
    local task_texture, task_rect = get_texture_info( "ui_iconsTotal_found_thing" )
    local news_text = "%c[255,1,255,1]" .. game.translate_string( "general_in_item" )
        .. "\\n" .. "%c[default] Цинк патронов 7x62."
    npc:give_talk_message( news_text, task_texture, task_rect, "iconed_answer_item" )
end

function give_2_rygyi( first_speaker, second_speaker )
    sak_inventory.release_actor_items( "rygyi_med_r", 1 )
    vergas_lib.search_items( "bandage", 2, 2 )
    amk.spawn_item_in_inv( "medkit", first_speaker )
    xr_wounded.unlock_medkit( first_speaker )
end

function have_rygyi_med()     return sak.have_items_count( "rygyi_med_r", 1 ) ~= false end
function not_have_rygyi_med() return not have_rygyi_med() end
function give_2_rygyi_krot()  sak_inventory.release_actor_items( "rygyi_med_r", 1 ) end
function bandage_2_no_have()  return vergas_lib.search_items( "bandage", 2, 1 ) == false end

function rygyi_med_ok()
    local obj = g_sim:story_object( story_ids.rygyi )
    if obj then
        if obj:alive() then
            local pk        = get_netpk( obj )
            local data      = pk:get()
            data.health     = 0.9
            data.upd.health = 0.9
            pk:set( data )
            local sobj      = alife():object( obj.id )
            sobj.wounded    = false
        else
            misc.release_by_name( "rygyi" )
            actor:give_info_portion( "rygyi_umer" )
        end
    end
end

function gar_flame()
    if db.actor:has_info( "gar_flame_start" ) or db.actor:has_info( "gar_flame_no_start" ) then
        return true
    else
        return false
    end
end

function gar_flame_full_have()
    local obj = db.actor:object( "wpn_flame" )
    if obj ~= nil then return true end
end

function take2_gar_flame()
    sak.create_items( db.actor, "wpn_flame", 1 )
    schedule.add( "timer_gar_flame", "sak_dialog.unload_gar_flame()", 250 )
end

function weapon_unload( arg )
    if arg then
        local wpn = false
        if type( arg ) == 'userdata' then
            wpn = arg
        else
            wpn = client_obj( tonumber( arg ) )
        end
        if wpn then
            wpn:unload_magazine()
        else
            wprintf( "[~T].~C0C #ERROR: weapon_unload failed for weapon id [%s]~C07", DumpVar( arg ) )
        end
    end
end

function open_dv_seif_flame()
    local obj1     = g_sim:story_object( story_ids.dv_sak_box_0001 )
    local ids, cnt = registry.inv_objects( obj1.id, true )
    for n = 1, cnt do
        local id   = ids[ n ]
        local sobj = client_obj( id )
        if sobj then misc.release_obj( id ) end
    end
    local obj = g_sim:create( "wpn_flame",
        obj1.position, obj1.m_level_vertex_id, obj1.m_game_vertex_id, obj1.id
    )
    if obj then
        schedule.add( "unload_weapon", "sak_dialog.weapon_unload("..obj.id..")", 250 )
    end
end

function unload_gar_flame()
    local obj = db.actor:object( "wpn_flame" )
    obj:unload_magazine()
end

function give_gar_flame( first_speaker, second_speaker )
    dialogs.relocate_item_section( second_speaker, "wpn_flame", "out" )
end

function give2_gar_flame( first_speaker, second_speaker )
    dialogs.relocate_item_section( second_speaker, "wpn_flame", "out" )
end

function gar_sakbox_have()
    return sak.have_items_count( "inventory_sakbox_gar_flame", 1 ) ~= false
end

function gar_flame_have()
    --return sak.have_items_count( "wpn_flame", 1 ) ~= false
    return test.have_with_cond( "wpn_flame", 1, 0.95, true )
end

function seryi_payment()
    sak.create_items( db.actor, "ammo_5.45x39_ap", 3 )
    sak.create_items( db.actor, "grenade_f1", 1 )
    sak.create_items( db.actor, "grenade_rgd5", 1 )
end

function hellcar_payment()
    sak.create_items( db.actor, "medkit_army", 2 )
    test.add_rnd_art_to_actor( 2, 5 )
    timers.start_timer( "end_hell", 0, 0, 11, "sak_dialog.end_hellcar()" )
end

function end_hellcar()
    db.actor:give_info_portion( "gar_hellcar_dialog_end" )
end

function have_1_rygyi()
    return
        sak.have_items_count( "mutant_face_tushkano", 2 ) ~= false
        and sak.have_items_count( "vodka", 1 ) ~= false
        and sak.have_items_count( "mutant_dog_tail", 2 ) ~= false
end

function give_1_rygyi()
    sak_inventory.release_actor_items( "mutant_face_tushkano", 2 )
    sak_inventory.release_actor_items( "vodka", 1 )
    sak_inventory.release_actor_items( "mutant_dog_tail", 2 )
end

function kontainer_1_have()
    return
            sak.have_items_count( "arc_art_box_1basic", 1 ) ~= false
        and sak.have_items_count( "amk_af_night_star", 1  ) ~= false
end

function give_kontainer_1( first_speaker, second_speaker )
    dialogs.relocate_item_section( second_speaker, "arc_art_box_1basic", "out" )
    sak_inventory.release_actor_items( "amk_af_night_star", 1 )
end

function add_kontainer_8()
    local npc = db.actor
    sak.create_items( npc, "wpn_pm", 1 )
    sak.create_items( npc, "ammo_9x18_fmj", 2 )
    nlc_vars.kontainer = nil
end

function add_pm_volk()
    sak.create_items( db.actor, "wpn_pm", 1 )
    sak.create_items( db.actor, "ammo_9x18_fmj", 1 )
end

function repair_box_not_have()  return sak.have_items_count( "repair_boxoutfit", 1 ) == false end
function repair_box_have()      return sak.have_items_count( "repair_boxoutfit", 1 ) ~= false end
function green_kolbasa_10have() return sak.have_items_count( "green_kolbasa", 10 ) end

function conserva_kolbasa_have()
    return
            sak.have_items_count( "conserva", 1 ) ~= false
        and sak.have_items_count( "kolbasa", 1  ) ~= false
end

function give_conserva_kolbasa()
    sak_inventory.release_actor_items( "conserva", 1 )
    sak_inventory.release_actor_items( "kolbasa", 1  )
end

function conserva_bread_have()
    return
            sak.have_items_count( "conserva", 1 ) ~= false
        and sak.have_items_count( "bread", 1    ) ~= false
end

function give_conserva_bread()
    sak_inventory.release_actor_items( "conserva", 1 )
    sak_inventory.release_actor_items( "bread", 1 )
end

function conserva_bread2_have()
    return
            sak.have_items_count( "conserva", 2 ) ~= false
        and sak.have_items_count( "bread", 2    ) ~= false
end

function give_conserva_2bread()
    sak_inventory.release_actor_items( "conserva", 2 )
    sak_inventory.release_actor_items( "bread", 2    )
end

function add_art_opt_food()
    sak.create_items( db.actor, "bread", 40 )
    sak.create_items( db.actor, "conserva", 40 )
    sak.create_items( db.actor, "energy_drink", 20 )
end

function take_psih_food()
    sak.create_items( db.actor, "bread", 2 )
    sak.create_items( db.actor, "kolbasa", 2 )
    sak.create_items( db.actor, "energy_drink", 2 )
end

function psih_food_have()
    return
        sak.have_items_count( "bread", 2   ) ~= false
        and sak.have_items_count( "kolbasa", 2 ) ~= false
        and vergas_lib.search_items( "energy_drink", 2, 1 ) ~= false
end

function give_psih_food()
    for _, v in ipairs({ "bread", "kolbasa", "energy_drink" }) do
        if vergas_lib.search_items( v, 2, 1 ) then
            vergas_lib.search_items( v, 2, 2 )
        end
    end
end

function food_borov_entres1_have()
    return
        sak.have_items_count( "bread", 40 ) ~= false
        and sak.have_items_count( "conserva", 40 ) ~= false
        and sak.have_items_count( "vodka", 20 ) ~= false
        and vergas_lib.search_items( "energy_drink", 20, 1 ) ~= false
end

function give_food_borov_entres1()
    sak_inventory.release_actor_items( "bread", 40 )
    sak_inventory.release_actor_items( "conserva", 40 )
    sak_inventory.release_actor_items( "vodka", 20 )
    vergas_lib.search_items( "energy_drink", 20, 2 )
end

function food_borov_entres2_have()
    return
        sak.have_items_count( "bread", 10 ) ~= false
        and sak.have_items_count( "conserva", 10 ) ~= false
        and sak.have_items_count( "vodka", 5 ) ~= false
        and vergas_lib.search_items( "energy_drink", 10, 1 ) ~= false
end

function give_food_borov_entres2()
    sak_inventory.release_actor_items( "bread", 10 )
    sak_inventory.release_actor_items( "conserva", 10 )
    sak_inventory.release_actor_items( "vodka", 5 )
    vergas_lib.search_items( "energy_drink", 10, 2 )
end

function timer_start_borov_entres()
    timers.start_timer( "entres", 0, 8, 11, "sak.info_borov_entres()" )
end

function timer_start_barman_entres()
    timers.start_timer( "entres", 0, 22, 11, "sak.info_barman_entres()" )
end

function timer_start_kulinar_entres()
    timers.start_timer( "entres", 0, 19, 11, "sak.info_kulinar_entres()" )
end

function timer_start_voron_entres()
    timers.start_timer( "entres", 0, 11, 11, "sak.info_voron_entres()" )
end

function conserva_vodka_have()
    return
        sak.have_items_count( "vodka", 1 ) ~= false
        and sak.have_items_count( "conserva", 2 ) ~= false
end

function give_conserva_vodka()
    sak_inventory.release_actor_items( "vodka", 1 )
    sak_inventory.release_actor_items( "conserva", 2 )
end

function have_krysyk_goodses()
    return
          ( sak.have_items_count( "capsule", 2, true     ) ~= false
        and sak.have_items_count( "af_star_new", 1, true ) ~= false
        ) or gg_n_cart_have( 3 )
end

function have_krysyk_goods()
    return
        sak.have_items_count( "capsule", 2, true ) ~= false
        and sak.have_items_count( "af_star_new", 1, true ) ~= false
end

function give_krysyk_goods()
    sak_inventory.release_actor_items( "capsule", 2, true )
    sak_inventory.release_actor_items( "af_star_new", 1, true )
end

function add_device_pda_npc()
    local npc = db.actor
    local obj = alife():create( "device_pda_npc",
        npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id()
    )
    if obj then vergas_pda.set_rnd_pda_info( obj.id ) end
    sak.relocate_item( npc, "in", "device_pda_npc", 1 )
end

function have_pda_krysyka()
    return sak.have_items_count( "pda_krysyka", 1 ) ~= false
end

function give_borov_11()
    sak_inventory.release_actor_items( "scaintist_docs", 1 )
    sak_inventory.release_actor_items( "inventory_sakbox_borov", 1 )
end

function have_borov_11()
    return sak.have_items_count( "inventory_sakbox_borov", 1 ) ~= false
end

function have_inventory_sakbox()
    for i = 1, table.getn( table_sakboxes ) do
        if sak.have_items_count( table_sakboxes[ i ], 1 ) then return true end
    end
    return false
end

function have_habar_in_seif()
    local obj      = level_object_by_sid( 31 )
    local ids, cnt = registry.inv_objects( obj:id(), true )
    if cnt >= 1 then return true end
    return false
end

function vint_in_seif()
    local obj      = level_object_by_sid( 9115 )
    local ids, cnt = registry.inv_objects( obj:id(), true )
    for n = 1, cnt do
        local id   = ids[ n ]
        local sobj = client_obj( id )
        if sobj and sobj:section() == "wpn_vintorez_m1" then return true end
    end
    return false
end

function vint_out_seif() return not vint_in_seif() end

function val_escort_reward( npc, actor )
    relocate_money( npc, 5300, "in" )
    sak.create_items( db.actor, "wpn_beretta", 1 )
end

function add_1antirad()      sak.create_items( db.actor, "antirad", 1     ) end
function add_1medkit_army()  sak.create_items( db.actor, "medkit_army", 1 ) end
function add_medkit()        sak.create_items( db.actor, "medkit", 1      ) end
function medkit5_army_have() return vergas_lib.search_items( "medkit_army", 5, 1 ) ~= false end
function give_5medkit_army() vergas_lib.search_items( "medkit_army", 5, 2 ) end
function give_20bandage()    vergas_lib.search_items( "bandage", 20, 2 ) end
function bandage20_have()    return vergas_lib.search_items( "bandage", 20, 1 ) ~= false end
function give_5bandage()     vergas_lib.search_items( "bandage", 5, 2 ) end
function bandage5_have()     return vergas_lib.search_items( "bandage", 5, 1 ) ~= false end
function give_3medkit()      vergas_lib.search_items( "medkit", 3, 2, true ) end
function medkit3_have()      return vergas_lib.search_items( "medkit", 3, 1, true ) ~= false end
function give_antirad()      vergas_lib.search_items( "antirad", 1, 2 ) end
function antirad_have()      return vergas_lib.search_items( "antirad", 1, 1 ) ~= false end

function spas12_have()
    return sak.have_items_count( "wpn_spas12", 1 ) ~= false
    or sak.have_items_count( "wpn_spas12_old", 1 ) ~= false
    or sak.have_items_count( "wpn_spas12_m1", 1  ) ~= false
    or sak.have_items_count( "wpn_spas12_m2", 1  ) ~= false
end

function give_spas12( first_speaker, second_speaker )
    for i, k in pairs( sak_inventory.rucksack ) do
        if strpos( i, "wpn_spas", 1, true ) then
            local obj = client_obj( k[ 1 ] )
            second_speaker:transfer_item( obj, first_speaker )
            amk.spawn_item_in_inv( "ammo_12x70_buck", second_speaker )
            dialogs.relocate_item_section( second_speaker, i, "out" )
            return
        end
    end
end

function docent_chimera_kogot_have()
    return sak.have_items_count( "mutant_chimera_kogot", 5 ) ~= false
    and sak.have_items_count( "device_pda_npc", 25 ) ~= false
end

function docent_hand_kontroler_have()
    return sak.have_items_count( "mutant_hand_kontroler", 1 ) ~= false
    and sak.have_items_count( "device_pda_npc", 30 ) ~= false
end

function docent_psevdogigant_hand_have()
    return sak.have_items_count( "mutant_psevdogigant_hand", 2 ) ~= false
    and sak.have_items_count( "device_pda_npc", 15 ) ~= false
end

function docent_krovosos_jaw_have()
    return sak.have_items_count( "mutant_krovosos_jaw", 2 ) ~= false
    and sak.have_items_count( "device_pda_npc", 20 ) ~= false
end

function docent_have_done()
    if
            ( db.actor:has_info("docent_detector1_done" ) )
        and ( db.actor:has_info("docent_detector2_done" ) )
        and ( db.actor:has_info("docent_detector3_done" ) )
        and ( db.actor:has_info("docent_detector4_done" ) )
    then
        return false
    else
        return true
    end
end

function give_fuzz_kolobok() sak_inventory.release_actor_items( "af_dummy_kolobok", 1 ) end
function fuzz_kolobok_have() return sak.have_items_count( "af_dummy_kolobok", 1, false, true ) ~= false end
function give_dummy_pellicle() sak_inventory.release_actor_items( "af_dummy_pellicle", 1 ) end
function dummy_pellicle_have() return sak.have_items_count( "af_dummy_pellicle", 1, false, true ) ~= false end
function give_dummy_battery() sak_inventory.release_actor_items( "af_dummy_battery", 1 ) end
function dummy_battery_have() return sak.have_items_count( "af_dummy_battery", 1, false, true ) ~= false end
function dummy_glassbeads_have() return sak.have_items_count( "af_dummy_glassbeads", 1, false, true ) ~= false end
function give_dummy_glassbeads() sak_inventory.release_actor_items( "af_dummy_glassbeads", 1 ) end
function give_dummy_dummy() sak_inventory.release_actor_items( "af_dummy_dummy", 1 ) end
function dummy_dummy_have() return sak.have_items_count( "af_dummy_dummy", 1, false, true ) ~= false end
function take_dummy_spring() sak.create_items( db.actor, "af_dummy_spring", 1 ) end
function give_dummy_spring() sak_inventory.release_actor_items( "af_dummy_spring", 1 ) end
function dummy_spring_have() return sak.have_items_count( "af_dummy_spring", 1, false, true ) ~= false end
function give_rusty_sea_urchin() sak_inventory.release_actor_items( "af_rusty_sea-urchin", 1 ) end
function rusty_sea_urchin_have() return sak.have_items_count( "af_rusty_sea-urchin", 1, false, true ) ~= false end
function give_rusty_kristall() sak_inventory.release_actor_items( "af_rusty_kristall", 1 ) end
function rusty_kristall_have() return sak.have_items_count( "af_rusty_kristall", 1, false, true ) ~= false end
function give_rusty_thorn() sak_inventory.release_actor_items( "af_rusty_thorn", 1 ) end
function rusty_thorn_have() return sak.have_items_count( "af_rusty_thorn", 1, false, true ) ~= false end
function give_ameba_slug() sak_inventory.release_actor_items( "af_ameba_slug", 1 ) end
function ameba_slug_have() return sak.have_items_count( "af_ameba_slug", 1, false, true ) ~= false end
function give_ameba_slime() sak_inventory.release_actor_items( "af_ameba_slime", 1 ) end
function ameba_slime_have() return sak.have_items_count( "af_ameba_slime", 1 ) ~= false end
function give_fireball() sak_inventory.release_actor_items( "af_fireball", 1 ) end
function fireball_have() return sak.have_items_count( "af_fireball", 1 ) ~= false end
function give_night_star() sak_inventory.release_actor_items( "af_night_star", 1 ) end
function night_star_have() return sak.have_items_count( "af_night_star", 1, false, true ) ~= false end
function electra_sparkler_have() return sak.have_items_count( "af_electra_sparkler", 1 ) ~= false end
function give_electra_sparkler() sak_inventory.release_actor_items( "af_electra_sparkler", 1 ) end
function give_dummy_buliz() sak_inventory.release_actor_items( "af_dummy_buliz", 1 ) end
function dummy_buliz_have() return sak.have_items_count( "af_dummy_buliz", 1 ) ~= false end
function give_drops() sak_inventory.release_actor_items( "af_drops", 1 )end
function drops_have() return sak.have_items_count( "af_drops", 1 ) ~= false end
function give_blood() sak_inventory.release_actor_items( "af_blood", 1 ) end
function blood_have() return sak.have_items_count( "af_blood", 1 ) ~= false end
function give_electra_flash() sak_inventory.release_actor_items( "af_electra_flash", 1 ) end
function electra_flash_have() return sak.have_items_count( "af_electra_flash", 1 ) ~= false end
function give_mincer_meat() sak_inventory.release_actor_items( "af_mincer_meat", 1 ) end
function mincer_meat_have() return sak.have_items_count( "af_mincer_meat", 1 ) ~= false end
function give_vyvert() sak_inventory.release_actor_items( "af_vyvert", 1 ) end
function vyvert_have() return sak.have_items_count( "af_vyvert", 1 ) ~= false end
function give_cristall_flower() sak_inventory.release_actor_items( "af_cristal_flower", 1 ) end
function cristall_flower_have() return sak.have_items_count( "af_cristal_flower", 1 ) ~= false end
function give_medusa() sak_inventory.release_actor_items( "af_medusa", 1 ) end
function medusa_have() return sak.have_items_count( "af_medusa", 1 ) ~= false end
function give_gravi() sak_inventory.release_actor_items( "af_gravi", 1 ) end
function gravi_have() return sak.have_items_count( "af_gravi", 1 ) ~= false end
function take_gravi_dyn() sak.create_items( db.actor, "af_gravi_dyn5d", 1 ) end

function have_cheques()
    return
        sak.have_items_count( "bearer_cheque", 1, true ) ~= false
        or sak.have_items_count( "2bearer_cheque", 1 ) ~= false
end

function have_cheque()  return sak.have_items_count( "bearer_cheque", 1, true ) ~= false end
function give_cheque()  sak_inventory.release_actor_items( "bearer_cheque", 1 ) end
function have_2cheque() return sak.have_items_count( "bearer_cheque", 2 ) ~= false end
function have_cheque2() return sak.have_items_count( "2bearer_cheque", 1 ) ~= false end

function have_2_cheque()
    return
        sak.have_items_count( "bearer_cheque", 2 ) ~= false
        or sak.have_items_count( "2bearer_cheque", 1 ) ~= false
end

function have_4_cheque()
    return
           sak.have_items_count( "bearer_cheque", 4  ) ~= false
        or sak.have_items_count( "2bearer_cheque", 2 ) ~= false
        or ( sak.have_items_count("bearer_cheque", 2 ) ~= false
        and sak.have_items_count( "2bearer_cheque", 1 ) ~= false
        )
end

function have_kulinar_cheque()
    return
        sak.have_items_count( "bearer_cheque", 1 ) ~= false
        and vergas_lib.search_items( "ammo_12x70_buck", 100, 1 ) ~= false
end

function give_cheques()
    if sak.have_items_count( "bearer_cheque", 1 ) then
        sak_inventory.release_actor_items( "bearer_cheque", 1 )
    elseif sak.have_items_count( "2bearer_cheque", 1 ) then
        sak_inventory.release_actor_items( "2bearer_cheque", 1 )
    end
end

function give_2_cheque()
    if sak.have_items_count( "bearer_cheque", 2 ) then
        sak_inventory.release_actor_items( "bearer_cheque", 2 )
    elseif sak.have_items_count( "2bearer_cheque", 1 ) then
        sak_inventory.release_actor_items( "2bearer_cheque", 1 )
    end
end

function give_4_cheque()
    if sak.have_items_count( "bearer_cheque", 4 ) then
        sak_inventory.release_actor_items( "bearer_cheque", 4 )
    elseif sak.have_items_count( "2bearer_cheque", 2 ) then
        sak_inventory.release_actor_items( "2bearer_cheque", 2 )
    elseif sak.have_items_count( "2bearer_cheque", 1 ) and sak.have_items_count( "bearer_cheque", 2 ) then
        sak_inventory.release_actor_items( "bearer_cheque", 2 )
        sak_inventory.release_actor_items( "2bearer_cheque", 1 )
    end
end

function give_cheque2() sak_inventory.release_actor_items( "2bearer_cheque", 1 ) end

function give_kulinar_cheque()
    sak_inventory.release_actor_items( "bearer_cheque", 1 )
    vergas_lib.search_items( "ammo_12x70_buck", 100, 2 )
end

function give_half_vodka()
    local count = math.floor( ( #sak_inventory.eatable[ "vodka" ] ) / 2 )
    if count > 0 then sak_inventory.release_actor_items( "vodka", count ) end
end

local dist_vodka_from_mil = 50

function out_vodka_from_mil()
    for a = 100, 45000, 1 do
        local obj = g_sim:object( a )
        if obj then
            local posobj   = obj.position
            local actorpos = db.actor:position()
            local npc_name = obj:name()
            if posobj:distance_to( actorpos ) < dist_vodka_from_mil then
                if (
                    obj.parent_id ~= 0
                    and (
                        obj.parent_id == nil or obj.parent_id == BAD_OBJ_ID
                        or g_sim:object( obj.parent_id ):section_name() == "inventory_box"
                        or g_sim:object( obj.parent_id ):section_name() == "m_inventory_box"
                        or g_sim:object( obj.parent_id ):section_name() == "rucksack"
                        )
                    )
                    and strpos( obj:section_name(), "vodka", 1, true )
                then
                    g_sim:release( obj, true )
                end
            end
        end
    end
end

local dist_wpn_from_mil = 50

function out_wpn_from_mil()
    for a = 100, MAX_OBJ_ID do
        local obj = g_sim:object( a )
        if obj then
            local posobj   = obj.position
            local actorpos = db.actor:position()
            local npc_name = obj:name()
            if posobj:distance_to( actorpos ) < dist_wpn_from_mil then
                if
                    strpos( obj:section_name(), "wpn_", 1, true )
                    and (
                        obj.parent_id ~= 0
                        and (
                            obj.parent_id == nil or obj.parent_id == BAD_OBJ_ID
                            or (
                                   g_sim:object( obj.parent_id ):section_name() == "inventory_box"
                                or g_sim:object( obj.parent_id ):section_name() == "m_inventory_box"
                                or g_sim:object( obj.parent_id ):section_name() == "rucksack"
                            )
                            and g_sim:object( obj.parent_id )
                            and g_sim:object( obj.parent_id ):name() ~= "mil_lager_spec_hran"
                        )
                    )
                then
                    g_sim:release( obj, true )
                end
            end
        end
    end
end

function add_greens_kolbasa( num )
    local count = ( nlc_vars.greens_kolbasa or 0 ) + num
    nlc_vars.greens_kolbasa = count
    sak.create_items( db.actor, "green_kolbasa", num )
end

function give_vodka()   sak_inventory.release_actor_items( "vodka", 1  ) end
function give_2vodka()  sak_inventory.release_actor_items( "vodka", 2  ) end
function give_3vodka()  sak_inventory.release_actor_items( "vodka", 3  ) end
function give_5vodka()  sak_inventory.release_actor_items( "vodka", 5  ) end
function give_7vodka()  sak_inventory.release_actor_items( "vodka", 7  ) end
function give_10vodka() sak_inventory.release_actor_items( "vodka", 10 ) end
function give_20vodka() sak_inventory.release_actor_items( "vodka", 20 ) end
function give_15vodka() sak_inventory.release_actor_items( "vodka", 15 ) end
function have_vodka()   return sak.have_items_count( "vodka", 1  ) ~= false end
function have_2vodka()  return sak.have_items_count( "vodka", 2  ) ~= false end
function have_3vodka()  return sak.have_items_count( "vodka", 3  ) ~= false end
function have_5vodka()  return sak.have_items_count( "vodka", 5  ) ~= false end
function have_7vodka()  return sak.have_items_count( "vodka", 7  ) ~= false end
function have_10vodka() return sak.have_items_count( "vodka", 10 ) ~= false end
function not_have_10vodka() return sak.have_items_count( "vodka", 10 ) == false end
function have_15vodka() return sak.have_items_count( "vodka", 15 ) ~= false end
function have_20vodka() return sak.have_items_count( "vodka", 20 ) ~= false end
function add_vodka()    sak.create_items( db.actor, "vodka", 1  ) end
function add_2vodka()   sak.create_items( db.actor, "vodka", 2  ) end
function add_5vodka()   sak.create_items( db.actor, "vodka", 5  ) end
function add_6vodka()   sak.create_items( db.actor, "vodka", 6  ) end
function add_8vodka()   sak.create_items( db.actor, "vodka", 6  ) end
function add_15vodka()  sak.create_items( db.actor, "vodka", 15 ) end
function give_agr_black_box() sak_inventory.release_actor_items( "agr_black_box", 1 ) end
function agr_black_box_have() return sak.have_items_count( "agr_black_box", 1 ) ~= false end
function strelok_pda_have()   return sak.have_items_count( "strelok_pda", 1 ) ~= false end
function rad_kontainer_have() return sak.have_items_count( "inventory_sakbox_rad", 1 ) ~= false end
function scintist_pda_have()  return sak.have_items_count( "scaintist_pda", 1 ) ~= false end
function bar_ivancov_playboy_have() return sak.have_items_count( "playboy10", 1 ) ~= false end
function strelok_pda2_have() return sak.have_items_count( "af_dummy_green_medusa", 1 ) ~= false end
function escape_lager_volk_document_have()     return sak.have_items_count( "sak_document2", 1 ) ~= false end
function escape_lager_volk_document_not_have() return sak.have_items_count( "sak_document2", 1 ) == false end
function give_sescape_lager_volk_document() sak_inventory.release_actor_items( "sak_document2", 1 ) end
function rad_document_not_have() return sak.have_items_count( "sak_document", 1 ) == false end
function diplomat_have() return sak.have_items_count( "diplomat", 1 ) ~= false end
function give_diplomat() sak_inventory.release_actor_items( "diplomat", 1 ) end
function computer_have() return sak.have_items_count( "computer", 1 ) ~= false end
function give_computer() sak_inventory.release_actor_items( "computer", 1 ) end
function mil_volk_resiver_have() return sak.have_items_count( "sak_resiver", 1 ) ~= false end
function give_mil_volk_resiver() sak_inventory.release_actor_items( "sak_resiver", 1 ) end
function notebook_have() return sak.have_items_count( "note-book", 1 ) ~= false end

function give_yan_scientist_teleport_01()
    nlc_vars.telepribor = nil
    sak.create_items( db.actor, "sak_resiver_yantar", 1 )
end

function give_yan_scientist_teleport_02()
    nlc_vars.telepribor = nil
    sak.create_items( db.actor, "sak_resiver2_yantar", 1 )
end

function skaner_1_in_place()
    local scan = false
    local id   = nlc_vars.telepribor or -1
    local obj  = g_sim:object( id )
    if obj then
        local map = g_sim:level_name( game_graph():vertex( obj.m_game_vertex_id ):level_id() )
        local pos = obj.position
        if
            map == "l07_military"
            and ( pos.y > -7 and pos.x < -243 and pos.x > -253 and pos.z < 302 and pos.z > 290 )
        then
            scan = true
        end
    end
    return scan
end

function skaner_2_in_place()
    local scan = false
    local id   = nlc_vars.telepribor or -1
    local obj  = g_sim:object( id )
    if obj then
        local map = g_sim:level_name( game_graph():vertex( obj.m_game_vertex_id ):level_id() )
        local pos = obj.position
        if
            map == "l01_escape"
            and ( pos.y > 28 and pos.x < 82 and pos.x > 30 and pos.z < 162 and pos.z > 152 )
        then
            scan = true
        end
    end
    return scan
end

function skaner_1_out_place() return not skaner_1_in_place() end
function skaner_2_out_place() return not skaner_2_in_place() end

function give_notebook( first_speaker, second_speaker )
    dialogs.relocate_item_section( second_speaker, "note-book", "out" )
end

function dummy_battery_red_have()
    return sak.have_items_count( "af_red_dummy_battery", 1 ) ~= false
end

function dummy_pellicle_red_have()
    return sak.have_items_count( "af_red_dummy_pellicle", 1 ) ~= false
end

function esc_petruha_toz_have()
    return sak.have_items_count( "wpn_toz34", 1 ) ~= false
end

function give_esc_petruha_toz( first_speaker, second_speaker )
    dialogs.relocate_item_section( second_speaker, "wpn_toz34", "out" )
    second_speaker:set_relation( game_object.friend, first_speaker )
end

function gar_dram_novice_mp5_m1_have()
    return test.have_with_cond( "wpn_mp5_m1", 1, 0.95, true )
end

function give_gar_dram_novice_mp5_m1( first_speaker, second_speaker )
    test.relocate_with_cond( first_speaker, second_speaker )
    dialogs.relocate_item_section( second_speaker, "ammo_9x18_fmj", "out" )
    second_speaker:set_relation( game_object.friend, first_speaker )
end

function yan_kruglov_green_art_have()
    local arts = { "af_dummy_green_blood", "af_dummy_green_vyvert", "af_dummy_green_medusa" }
    return sak.have_items_count( arts[ nlc_vars.stored_r_treas_items or 1 ], 1 ) ~= false
end

function add_spot_to_hospital()
    db.actor:give_info_portion( "info_way158a" )
    local obj2 = g_sim:story_object( story_ids.esc_exit_to_hos_158 )
    level.map_add_object_spot_ser( obj2.id, "level_changer_self", "to_hospital" )
end

function add_spot_x16()
    local obj2 = g_sim:story_object( story_ids.exit_to_brainlab_01 )
    if obj2 then
        level.map_add_object_spot_ser( obj2.id, "level_changer_self", "Где-то тут вход в Х16" )
    end
end

function give_gar_hellcar_outfit( first_speaker, second_speaker )
    sak_inventory.release_actor_items( "stalker_outfit_m3", 1 )
    second_speaker:set_relation( game_object.friend, first_speaker )
end

function give_agr_krot_PDA( first_speaker, second_speaker )
    sak_inventory.release_actor_items( "agroprom_pda", 1 )
    second_speaker:set_relation( game_object.friend, first_speaker )
end

function add_gift_ivancov()
    sak.create_items( db.actor, "ammo_7.62x39_ap", 2 )
    sak.create_items( db.actor, "medkit_army", 2 )
    sak.create_items( db.actor, "ammo_vog-25", 5 )
end

function give_gar_dolg_flesh_eye( first_speaker, second_speaker )
    sak_inventory.release_actor_items( "mutant_flesh_eye", 4 )
    second_speaker:set_relation( game_object.friend, first_speaker )
end

function bar_dolg_base_guard_art_have()
    local rand = nlc_vars.stored_r_treas_items or 1
    local arts = { "af_dummy_green_medusa", "af_dummy_green_blood", "af_dummy_green_vyvert" }
    return sak.have_items_count( arts[ rand ], 1 ) ~= false
end

function take_green_vyvert()
    local rand = nlc_vars.stored_r_treas_items or 1
    local arts = { "af_dummy_green_medusa", "af_dummy_green_blood", "af_dummy_green_vyvert" }
    sak.create_items( db.actor, arts[ rand ], 1 )
end

function give_bar_dolg_base_guard_art( first_speaker, second_speaker )
    local rand = nlc_vars.stored_r_treas_items or 1
    local arts = { "af_dummy_green_medusa", "af_dummy_green_blood", "af_dummy_green_vyvert" }
    sak_inventory.release_actor_items( arts[ rand ], 1 )
    second_speaker:set_relation( game_object.friend, first_speaker )
end

function abuse_to_fox( first_speaker, second_speaker )
    second_speaker:set_relation( game_object.neutral, first_speaker )
    db.actor:give_info_portion( "escape_fox_abuse" )
end

function off_agroprom_box()
    local obj = g_sim:story_object( story_ids.agr_quest_case_02 )
    if obj then g_sim:release( obj ) end
end

function add_barmen_find_item()
    local points = {
        { -232.61698913574, 28.373668670654, -85.214828491211, 68471, 3076 },
        { -233.13415527344, 28.401670455933, -90.139869689941, 67597, 3076 },
        { -227.13482666016, 27.767774581909, -93.275100708008, 74307, 3076 }
    }
    for a = 1, #points do
        amk.spawn_item( "ecolog_device",
            sak.v3f( points[ a ][ 1 ], points[ a ][ 2 ], points[ a ][ 3 ] ),
            points[ a ][ 5 ], points[ a ][ 4 ]
        )
    end
end

function add_ecolog_find_item()
    local points = {
        { 196.353515625,   28.058179855347, -226.43449401855, 563636, 3130 },
        { 194.33270263672, 28.449327468872, -234.81425476074, 561275, 3130 },
        { 181.56039428711, 27.844184875488, -234.41131591797, 546093, 3130 },
        { 174.21365356445, 27.436065673828, -231.27116394043, 538160, 3130 }
    }
    for a = 1, 2 do
        local rand = lua_random( 1, #points )
        amk.spawn_item( "ecolog_device",
            sak.v3f( points[ rand ][ 1 ], points[ rand ][ 2 ], points[ rand ][ 3 ] ),
            points[ rand ][ 5 ], points[ rand ][ 4 ]
        )
    end
end

function add_sak_plan()
    local rand   = ( amk_vars.r_treas_items or 1 ) * 5
    local points = {
         22.983282089233,  4.7107396125793, 26.518951416016, 80560, 3263,
         237.63459777832, -3.4720945358276, 565.9752197265, 679463, 4102,
        -185.87057495117,  1.2867486476898, 422.03298950195, 49325, 3361
    }
    amk.spawn_item( "sak_plan",
        sak.v3f( points[ rand - 4 ], points[ rand - 3 ], points[ rand - 2 ] ),
        points[ rand ], points[ rand - 1 ]
    )
end

function ratcatcher_food_have()
    return
            sak.have_items_count( "bread", 20    ) ~= false
        and sak.have_items_count( "conserva", 20 ) ~= false
        and sak.have_items_count( "vodka", 5     ) ~= false
        and sak.have_items_count( "kolbasa", 20  ) ~= false
end

function tushkano_have()
    return
        sak.have_items_count( "mutant_face_tushkano", 10 ) ~= false
        and sak.have_items_count( "vodka", 10 ) ~= false
end

function give_tushkano()
    sak_inventory.release_actor_items( "mutant_face_tushkano", 10 )
    sak_inventory.release_actor_items( "vodka", 10 )
end

function give_val_pula_boar_leg()
    sak_inventory.release_actor_items( "mutant_boar_leg", 8 )
    sak_inventory.release_actor_items( "vodka", 8 )
end

function add_green_blood()
    local rand = amk_vars.r_treas_items or 1
    local arts = { "af_dummy_green_vyvert", "af_dummy_green_medusa", "af_dummy_green_blood" }
    sak.create_items( db.actor, arts[ rand ], 1 )
end

function val_pula_boar_leg_have()
    return
        sak.have_items_count( "mutant_boar_leg", 8 ) ~= false
        and sak.have_items_count( "vodka", 8 ) ~= false
end

function give_ratcatcher_order()
    sak_inventory.release_actor_items( "rad_document7", 1 )
    sak.create_items( db.actor, "af_red_dummy_battery", 1 )
end

function give_val_escort_PDA( first_speaker, second_speaker )
    sak_inventory.release_actor_items( "und_pda", 1 )
    second_speaker:set_relation( game_object.friend, first_speaker )
end

function bar_dolg_petrenko_gaussgan_have()
    return sak.have_items_count( "wpn_gungauss", 1 ) ~= false
end

function gg_not_gaussgan_have()
    return not bar_dolg_petrenko_gaussgan_have()
end

function give_bar_dolg_petrenko_gaussgan( first_speaker, second_speaker )
    sak_inventory.release_actor_items( "wpn_gungauss", 1 )
    second_speaker:set_relation( game_object.friend, first_speaker )
end

function gg_new_makintosh()
    if
           db.actor:has_info( "krysyk_give_pda" )
        or db.actor:has_info( "gar_dm_bandits_secret" )
        or db.actor:has_info( "stepanych_shkura_start_info" )
    then
        return true
    else
        return false
    end
end

function not_have_infos_green()
    if
            db.actor:has_info( "info_green_medusa" )
        and db.actor:has_info( "info_green_vyvert" )
        and db.actor:has_info( "info_green_blood" )
    then
        return false
    else
        return true
    end
end

function gg_new_about_cherep()
    if
           db.actor:has_info( "mil_dolg_dialog_already" )
        or db.actor:has_info( "mil_patrol_glavn_know" )
    then
        return true
    else
        return false
    end
end

function gg_new_about_marsh()
    if
           db.actor:has_info( "info_way166a" )
        or db.actor:has_info( "info_way178a" )
        or db.actor:has_info( "info_way183a" )
    then
        return true
    else
        return false
    end
end

function gg_not_new_about_marsh() return not gg_new_about_marsh() end

function docs_X18_have()
    return (
        sak.have_items_count( "x18_document", 1 ) ~= false
        and nlc_vars.x18_docs_spawned ~= nil
    )
end

local kol_x18 = 0

function give_docs_X18()
    for kk, k in pairs( sak_inventory.rucksack ) do
        if strpos( kk, "x18_document", 1, true ) then
            kol_x18 = #k
            sak_inventory.release_actor_items( "x18_document", kol_x18 )
        end
    end
end

function docs_X18_nagrad()
    local spawned = nlc_vars.x18_docs_spawned
    if spawned then
        if kol_x18 >= spawned then
            db.actor:give_talk_message(
                "Так... Что это? Отчеты о проведенных экспериментах! Бухгалтерские документы... Описание практических шагов по получению наблюдаемых эффектов! Ого! Не ожидали, честно скажу, не ожидали! Вы безусловно заслужили большую награду! Жаль, наши стесненные фонды не позволяют по настоящему Вас отблагодарить... Примите эти вещи и информацию, и, может быть, мы сумеем в будущем быть более щедрыми.",
                "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
            )
            test.give_rnd_recipt( 4 )
            test.add_to_actor( "medkit_scientic", 6 )
        elseif kol_x18 < spawned and kol_x18 > 0 then
            db.actor:give_talk_message(
                "Так... Что это? Постовая ведомость. Бухгалтерские документы... Наряды на работы... Мда. Ничего интересного. Жаль. Мы надеялись на большее... Тогда может и награда была бы существеннее. А пока вот, возьмите...",
                "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0), "simple_answer_item"
            )
            test.add_to_actor( "medkit_scientic", 4 )
            test.add_to_actor( "antirad", 4 )
        end
    end
    nlc_vars.x18_docs_spawned = nil
end

function yan_scientist_books_have()
    return
            sak.have_items_count( "sak_book1", 1 ) ~= false
        and sak.have_items_count( "sak_book2", 1 ) ~= false
        and sak.have_items_count( "sak_book3", 1 ) ~= false
end

function give_yan_scientist_books()
    sak_inventory.release_actor_items( "sak_book1", 1 )
    sak_inventory.release_actor_items( "sak_book2", 1 )
    sak_inventory.release_actor_items( "sak_book3", 1 )
end

function give_esc_trader_yan_kruglov_art()
    sak_inventory.release_actor_items( "inventory_sakbox_yan_kruglov", 1 )
    sak.create_items( db.actor, "quest_manycase_01_kruglov", 1 )
end

function yan_scientist_find_case_have()
    return sak.have_items_count( "quest_case_06", 1 ) ~= false
end

function yan_scientist_not_find_case_have()
    return not yan_scientist_find_case_have()
end

local armor_profit_margin = 4

function kruglov_start_time()
    timers.start_timer( "kruglov_ros_time", 0, 22, 21, "sak.kruglov_end_time()" )
end
-- снятие аддонов с пух, не используется вроде. Не работает?
function release_addons( sobj, wpn, obj )
    if sobj ~= nil then
        local ini     = system_ini()
        local pk      = get_netpk( sobj )
        local data    = pk:get()
        local a_fl    = data.addon_flags
        local h_scope = read_if_exist( ini, wpn, "scope_status", nil )
        local h_sil   = read_if_exist( ini, wpn, "silencer_status", nil )
        local h_gren  = read_if_exist( ini, wpn, "grenade_launcher_status", nil )
        -------------------------------------------------------------------------
        if h_scope == 2 then
            h_scope = read_string_if_exist( ini, wpn, "scope_name", nil )
            if
                h_scope ~= nil
                and ( a_fl == 1 or a_fl == 3 or a_fl == 5 or a_fl == 7 )
            then
                h_scope = g_sim:create( h_scope, db.actor:position(), db.actor:level_vertex_id(),
                    db.actor:game_vertex_id(), db.actor:id()
                )
            end
        end
        -------------------------------------------------------------------------
        if h_sil == 2 then
            h_sil = read_string_if_exist( ini, wpn, "silencer_name", nil )
            if h_sil ~= nil and a_fl >= 4 then
                h_sil = g_sim:create( h_sil, db.actor:position(), db.actor:level_vertex_id(),
                    db.actor:game_vertex_id(), db.actor:id()
                )
            end
        end
        -------------------------------------------------------------------------
        if h_gren == 2 then
            h_gren = read_string_if_exist( ini, wpn, "grenade_launcher_name", nil )
            if
                h_gren ~= nil
                and ( a_fl == 2 or a_fl == 3 or a_fl == 6 or a_fl == 7 )
            then
                h_gren = g_sim:create( h_gren, db.actor:position(), db.actor:level_vertex_id(),
                    db.actor:game_vertex_id(), db.actor:id()
                )
            end
        end
    end
end
-- ?????????????
function get_vars( amkvar )
    local strg = nlc_vars[ amkvar ]
    if strg ~= nil then
        wpnsec = string.sub( strg, 2, string.len(strg ) )
        stcode = tonumber( string.sub(strg, 1, 1 ) )
    else
        wpnsec = nil
        stcode = 0
    end
end

function read_if_exist( ltx, section, value, default )
    if ltx:line_exist( section, value ) then return ltx:r_float( section, value )
    else return default
    end
end

function read_string_if_exist( ltx, section, value, default )
    if ltx:line_exist( section, value ) then return ltx:r_string( section, value )
    else return default
    end
end

function relocate_money( victim, num, type )
    if db.actor and victim then
        if type == "in" then
            db.actor:give_money( num )
        elseif type == 1 then
            db.actor:give_money(-num)
        end
        news_manager.relocate_money( db.actor, type, num )
    end
end

function text_money_skrjaga_water_dialog()
    local day_money = math.ceil( sak.day_money / 12 )
    local cost1     = ( 10 + day_money * 5 )
    db.actor:give_talk_message(
        "%c[255,216,186,140]По сегодняшнему нашему курсу " .. cost1 .. " патронов к натовским пукалкам...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end

function skrjaga_water_money_have()
    local day_money = math.ceil( sak.day_money / 12 )
    local cost1     = ( 10 + day_money * 5 )
    return vergas_lib.search_items( "ammo_5.56x45", cost1, 1 ) ~= false
end

function give_skrjaga_water_money()
    local day_money = math.ceil( sak.day_money / 12 )
    local cost1     = ( 10 + day_money * 5 )
    vergas_lib.search_items( "ammo_5.56x45", cost1, 2 )
end

function text_money_cook_water_dialog()
    local day_money = math.ceil( sak.day_money / 6 )
    local cost1     = ( 1000 + day_money * 100 )
    db.actor:give_talk_message(
        "%c[255,216,186,140]" .. cost1 .. " рябчиков не пожалей и будет тебе щастье...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end

function cook_water_money_have()
    local day_money = math.ceil( sak.day_money / 6 )
    return db.actor:money() >= ( 1000 + day_money * 100 )
end

function give_cook_water_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day_money = math.ceil( sak.day_money / 6 )
    relocate_money( npc, ( 1000 + day_money * 100 ), 1 )
end

function text_money_esc_water_dialog()
    local day_money = math.ceil( sak.day_money / 8 )
    local cost1     = ( 400 + day_money * 100 )
    db.actor:give_talk_message(
        "%c[255,216,186,140]Рубликов " .. cost1 .. "?", "ui\\ui_iconsTotal",
        Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end

function esc_water_money_have()
    local day_money = math.ceil( sak.day_money / 8 )
    return db.actor:money() >= ( 400 + day_money * 100 )
end

function give_esc_water_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day_money = math.ceil( sak.day_money / 8 )
    relocate_money( npc, ( 400 + day_money * 100 ), 1 )
end

function not_bar_water()
    local randd, randh = math.abs( level.get_time_days() + sak.day_money ), level.get_time_hours()
    local rand = randh + randd
    while rand > 23 do rand = rand-24 end
    for  i = 0, 1 do
        if rand == ( i * 6 + 2 ) or rand == ( i * 6 + 1 ) then return true end
    end
    return false
end

function bar_water_have() return not not_bar_water() end
function mil_water_have() return not not_mil_water() end

function not_mil_water()
    local randd, randh = math.abs( level.get_time_days() + sak.day_money ), level.get_time_hours()
    local rand = randh + randd
    while rand > 23 do rand = rand-24 end
    for  i = 0, 1 do
        if rand == ( i * 6 + 5 ) or rand == ( i * 6 + 6 ) then return true end
    end
    return false
end

function text_money_sidor_capsule_dialog()
    local day_money = math.ceil( sak.day_money / 8 )
    local cost1     = ( 1000 + day_money * 1000 )
    db.actor:give_talk_message(
        "%c[255,216,186,140]Так что давай " .. cost1 .. "... рубликов. А я аппарат подготовлю. Ну, или артефакт, простой, первого уровня, если бумажек жалко...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end

function sidor_capsule_money_have()
    local day_money = math.ceil( sak.day_money / 8 )
    return db.actor:money() >= ( 1000 + day_money * 1000 )
end

function give_sidor_capsule_money( t1, t2 )
    local npc = t1 if npc:id() == db.actor:id() then npc = t2 end
    local day_money = math.ceil( sak.day_money / 8 )
    relocate_money( npc, ( 1000 + day_money * 1000 ), 1 )
end

function text_money_sidor_flame_load_dialog()
    local day_money = math.floor( sak.day_money )
    local cost1     = ( 60000 + day_money * 1000 )   -- 20 день: 80 тыс. 100 день: 160 тыс.
    db.actor:give_talk_message(
        "%c[255,216,186,140]" .. cost1 .. " рубликов обойдётся... А если жалко - гони капсулу, а то на базаре всё щас так дорого...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end

function sidor_flame_load_money_have()
    local day_money = math.floor( sak.day_money ) -- 20 день: 80 тыс. 100 день: 160 тыс.
    return db.actor:money() >= ( 60000 + day_money * 1000 )
end

function give_sidor_flame_load_money( t1, t2 )
    local npc = t1 if npc:id() == db.actor:id() then npc = t2 end
    local day_money = math.floor( sak.day_money )
    relocate_money( npc, ( 60000 + day_money * 1000 ), 1 ) -- 20 день: 80 тыс. 100 день: 160 тыс.
end

function text_money_barmen_capsule_dialog()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    local cost1     = ( 4000 + day_money * 800 )
    db.actor:give_talk_message(
        "%c[255,216,186,140]Всего навсего " .. cost1 .. "... рубликов - и считай капсула уже вскрыта! Ну, или артефактик какой, простенький...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0), "simple_answer_item"
    )
end

function barmen_capsule_money_have()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    return db.actor:money() >= ( 4000 + day_money * 800 )
end

function give_barmen_capsule_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    relocate_money( npc, (4000 + day_money * 800 ), 1 )
end
-----------   TODO: переделать на универсальные функции  ---------------------
------------------------------------------------------------------------------
function text_money_voronin_seif_dialog()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    local cost1     = ( 3000 + day_money * 800 )
    local cost2     = ( 10000 + day_money * 2000 )
    db.actor:give_talk_message(
        "%c[255,216,186,140]За разовый доступ - " .. cost1 .. " рублей. Или же перечисли " .. cost2 .. " и два дня в любой момент можешь рыться в своём хабаре...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end
function voronin_seif_money_have()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    return db.actor:money() >= ( 3000 + day_money * 800 )
end
function voronin_seif_money_not_have() return not voronin_seif_money_have() end
function give_voronin_seif_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    relocate_money( npc, (3000 + day_money * 800 ), 1 )
end
function voronin_seif_money_dolg()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    local summ = 2 * ( 3000 + day_money * 800 )
    nlc_vars.voronin_dolg = summ
    db.actor:give_info_portion( "voronin_dolg_have" )
end
function voronin_dolg_money_have()
    local summ      = nlc_vars.voronin_dolg or 15000
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    return db.actor:money() >= ( ( 3000 + day_money * 800 ) + summ )
end
function give_voronin_dolg( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local summ      = nlc_vars.voronin_dolg or 15000
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    relocate_money( npc, ( ( 3000 + day_money * 800 ) + summ ), 1 )
    db.actor:disable_info_portion( "voronin_dolg_have" )
end
function voronin_seif2_money_have()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    return db.actor:money() >= ( 10000 + day_money * 2000 )
end
function give_voronin_seif2_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    relocate_money( npc, ( 10000 + day_money * 2000 ), 1 )
end
function text_money_lukash_seif_dialog()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    local cost1     = ( 5000 + day_money * 900 )
    db.actor:give_talk_message(
        "%c[255,216,186,140]Всего навсего " .. cost1 .. "... Смешно даже говорить...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end
function lukash_seif_money_have()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    return db.actor:money() >= ( 5000 + day_money * 900 )
end
function give_lukash_seif_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day_money = sak.day_money
    relocate_money( npc, ( 5000 + day_money * 100 ), 1 )
end
function text_money_stas_seif_dialog()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    local cost1     = ( 1900 + day_money * 700 )
    db.actor:give_talk_message(
        "%c[255,216,186,140]давай перечисли мне " .. cost1 .. " за разовый доступ и за хабар можешь не беспокоиться...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end
function stas_seif_money_have()
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    return db.actor:money() >= ( 1900 + day_money * 700 )
end
function give_stas_seif_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day_money = math.ceil( math.sqrt( sak.day_money ) )
    relocate_money( npc, (1900 + day_money * 700 ), 1 )
end

----------------------  ТОЖЕ КУЧА КОПИПАСТЫ, СДЕЛАТЬ БЫ НОРМАЛЬНО  -------------------
function text_money_esc_akkum_dialog()
    local day = sak.day_money - 5
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 2 )
    local cost1     = ( 200 + day_money * 200 )
    if cost1 > 5000 then cost1 = 5000 end
    db.actor:give_talk_message(
        "%c[255,216,186,140]Перекачивай " .. cost1 .. " рубликов и давай разряженный аккумулятор...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end
function esc_akkum_money_have()
    local day = sak.day_money - 5
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 2 )
    local cost1     = ( 200 + day_money * 200 )
    if cost1 > 5000 then cost1 = 5000 end
    return db.actor:money() >= cost1
end
function esc_akkum_money_3000()
    local day = sak.day_money - 5
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 2 )
    local cost1 = ( 200 + day_money * 200 )
    return cost1 >= 2500
end
function give_esc_akkum_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day = sak.day_money - 5
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 2 )
    local cost1 = ( 200 + day_money * 200 )
    if cost1 > 5000 then cost1 = 5000 end
    relocate_money( npc, cost1, 1 )
end
function text_money_bar_akkum_dialog()
    local day = sak.day_money - 5
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 3 )
    local cost1 = ( 1200 + day_money * 300 )
    if cost1 > 8000 then cost1 = 8000 end
    db.actor:give_talk_message(
        "%c[255,216,186,140]перечисли " .. cost1 .. " рубликов и получишь в обмен на разряженный, полностью залитый энергией...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end
function bar_akkum_money_have()
    local day = sak.day_money - 5
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 3 )
    local cost1 = ( 1200 + day_money * 300 )
    if cost1 > 8000 then cost1 = 8000 end
    return db.actor:money() >= cost1
end
function give_bar_akkum_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day = sak.day_money-5
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 3 )
    local cost1 = ( 1200 + day_money * 300 )
    if cost1 > 8000 then cost1 = 8000 end
    relocate_money( npc, cost1, 1 )
end
function text_money_bar_water_dialog()
    local day = sak.day_money - 3
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 5 )
    local cost1 = ( 600 + day_money * 100 )
    if cost1 > 2500 then cost1 = 2500 end
    db.actor:give_talk_message(
        "%c[255,216,186,140]перечисли " .. cost1 .. " рубликов и можешь набрать воды вон в умывальнике, возле дизеля...",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end
function bar_water_money_have()
    local day = sak.day_money - 3
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 5 )
    local cost1 = ( 600 + day_money * 100 )
    if cost1 > 2500 then cost1 = 2500 end
    return db.actor:money() >= cost1
end
function give_bar_water_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    local day = sak.day_money - 3
    if day < 0 then day = 0 end
    local day_money = math.ceil( day / 5 )
    local cost1 = ( 600 + day_money * 100 )
    if cost1 > 2500 then cost1 = 2500 end
    relocate_money( npc, cost1, 1 )
end
------------------------------------------------------------------------------------

-- воробей даст по дням 2000-4000 тыс или 2-4 гранаты
function text_vorobey_gift()
    local cost1 = 2000 + math.fmod( ( timers.Get_Game_Days() + 5) , 2 )
    local gr    = 2 + math.fmod( timers.Get_Game_Days(), 1 )
    db.actor:give_talk_message(
        "%c[255,216,186,140]Могу деньгами насыпать " .. cost1 ..
        " рубликов, неплохо а?\\nИли вот есть гранаты к подствольнику, " .. gr ..
        " штучки. Соглашайся, ну!", "ui\\ui_iconsTotal",
        Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end

function add_vorobey1_gift()
    local cost1 = 2000 + math.fmod( ( timers.Get_Game_Days() + 5) , 2 )
    dialogs.relocate_money( db.actor, cost1, "in" )
end

function add_vorobey2_gift()
    local gr = 2 + math.fmod( timers.Get_Game_Days(), 1 )
    sak.create_items( db.actor, "ammo_vog-25", gr )
end

function actor_have( amount )
    return db.actor:money() >= amount
end

function actor_1000_not_have() return not actor_have(1000) end
function actor_7000_not_have() return not actor_have(7000) end
function actor_20000_have() return db.actor:money() >= 20000 end
function actor_50000_have() return db.actor:money() >= 50000 end
function actor_10000_have() return db.actor:money() >= 10000 end
function actor_5000_have()  return db.actor:money() >= 5000  end

function in_all_money()
    local summ_old = db.actor:money()
    local summ     = ( nlc_vars.actor_many or 0 )
    db.actor:give_money( summ - summ_old )
    nlc_vars.actor_many = nil
end

function in_all_jank_money()
    local summ = ( nlc_vars.actor_many or 0 )
    db.actor:give_money( summ )
    nlc_vars.actor_many = nil
end

function out_all_money()
    local summ          = db.actor:money()
    nlc_vars.actor_many = summ
    db.actor:give_money( -summ )
end

function in_saharov_money()
    local summ = ( nlc_vars.saharov_many or 0 )
    db.actor:give_money( summ )
    sak.flag_sah = true
end

function out_saharov_money()
    local summ            = db.actor:money()
    nlc_vars.saharov_many = summ
    sak.flag_sah          = false
end

function neum_out_all_money( npc, actor )
    local summ = npc:money()
    dialogs.relocate_money( actor, summ, "out" )
    local obj = npc:object( "lot_many" )
    if obj then
        sak_inventory.release_actor_items( "lot_many", 1 )
    end
end

function give_money( amount, type )
    if db.actor then
        if     type == "in" then db.actor:give_money( amount )
        elseif type == 1    then db.actor:give_money(-amount )
        end
        news_manager.relocate_money( db.actor, type, amount )
    end
end

function give_50000_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    relocate_money( npc, 50000, 1 )
end

function give_20000_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    relocate_money( npc, 20000, 1 )
end

function give_10000_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    relocate_money( npc, 10000, 1 )
end

function give_5000_money( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    relocate_money( npc, 5000, 1 )
end

function is_val_vlad( t1, t2 )
    local npc = t1
    if npc:id() == db.actor:id() then npc = t2 end
    return npc:name() == "val_vlad"
end

function pesh_out_all_item() out_all_item( 5872 ) end

local non_trnsf_item = nlc_container.important_items

function out_all_item( sid ) -- TODO: в связи с переделкой инвентаря, кое что тут наверняка сломалось
    local in_object  = level_object_by_sid( sid )
    local out_object = db.actor
    for i, k in pairs( sak_inventory.slots ) do
        if ( i ~= "bolt" and i ~= "device_torch" and i ~= "device_pda" ) then
            local item = client_obj( k[ 1 ] )
            out_object:transfer_item( item, in_object )
        end
    end
    for i, k in pairs( sak_inventory.belt_items ) do
        for j = 1, #k do
            local item = client_obj( k[ j ] )
            out_object:transfer_item( item, in_object )
        end
    end
    for i, k in pairs( sak_inventory.rucksack ) do
        if not non_trnsf_item[ i ] then
            for j = 1, #k do
                local item = client_obj( k[ j ] )
                out_object:transfer_item( item, in_object )
            end
        end
    end
    for i, k in pairs( sak_inventory.eatable ) do
        if not non_trnsf_item[ i ] then
            for j = 1, #k do
                local item = client_obj( k[ j ] )
                out_object:transfer_item(item, in_object )
            end
        end
    end
    sak.off_on( in_object )
    sak_inventory.need_update_inventory()
end

function time_tomorrow() return level.get_time_hours() >= 6 end
function time_not_tomorrow() return not time_tomorrow() end

function treasure_timer( key )
    local list     = {}
    list.t_stas    = "time_start_stas_seif"
    list.t_docent  = "time_start_docent_seif"
    list.t_lukash  = "time_start_lukash_seif"
    list.t_voronin = "time_start_voronin_seif"
    return list[ key ] or key
end

function start_time( name_timer )
    local gtime = timers.Get_Game_Minutes()
    --ODS("[~T].~C0C сейчас сохраняем "..gtime.."~C07")
    if nlc_vars.dialog_timers == nil then nlc_vars.dialog_timers = {} end
    name_timer = treasure_timer( name_timer ) -- decode attempts
    nlc_vars.dialog_timers[ name_timer ] = gtime
end

function dialog_timer_value( name_timer, default )
    if nlc_vars.dialog_timers == nil then nlc_vars.dialog_timers = {} end
    default = default or 0
    return nlc_vars.dialog_timers[ name_timer ] or default
end

function is_ready_time( name_timer, timer, default )
    local gtime = timers.Get_Game_Minutes()
    local ftime = dialog_timer_value( name_timer, default )
    --ODS("[~T].~C0C сейчас "..gtime.."  сохранено:  "..ftime.."~C07")
    -- в случае чего вычитается месяц
    if ftime > gtime then ftime = ( ftime - 31 * 24 * 60 ) end
    -- адаптация для ремонтников, только если таймер взведен
    if ( ftime ~= 0 ) and ( gtime - ftime ) >= timer then
        return true
    else
        return false
    end
end

function not_ready_time( name_timer, timer ) -- возвращает тру, если время ещё не вышло
    return not is_ready_time( name_timer, timer )
end

local function num( v, default )
    return tonumber( v or default )
end

function treasure_time_have( name_time, days, hours, minutes )
    name_time   = treasure_timer( name_time )
    local start = dialog_timer_value( name_time ) -- время когда нычку оплатили
    local time  = ( num( days, 0 ) * 24 + num( hours, 0 ) ) * 60 + num( minutes, 0 )
    local rest  = time - ( timers.Get_Game_Minutes() - start ) -- сколько осталось оплаченного времени
    wprintf( " #TIME_HAVE: dialog timer~C0A '%s'~C07 start =~C0D %d ~C07, rest =~C0D %d~C07", name_time, start, rest )
    if 0 == start then
        return false
    else
        return rest > 0
    end
end

function treasure_time_over( name_time, days, hours, minutes )
    return not treasure_time_have( name_time, days, hours, minutes )
end

function clear_ready_time( name_timer )
    nlc_vars.dialog_timers[ name_timer ] = nil
end

function sid_repa_no_good()
    timers.start_timer( "sid_repa", 0, 17, 11, "sak_dialog.up_repa(-550)" )
end

function hellcar_repa_no_good()
    timers.start_timer( "hell_repa", 0, 0, 19, "sak_dialog.all_repa_no_good()" )
end

function all_repa_no_good()
    db.actor:change_character_reputation( -50 )
    timers.start_timer( "hell_repa", 0, 5, 11, "sak_dialog.up_repa(-250)" )
    local name, sname = amk_names_lists.get_strings()
    amk.send_tip(
        "Видел, как один сталкер с харей покорёженной, парня завалил. От такого всё, что хочешь ждать можно.",
        name .. " " .. sname, nil, 15, "uniq", "news", "gray"
    )
    local name2, sname2 = amk_names_lists.get_strings()
    amk.send_tip(
        "Это кто такой? Знал я одного. Морда ужас! Копчёный или не... На мы букву... В общем понятно всё с таким.",
        name2 .. " " .. sname2, 15, 15, "uniq", "news", "gray"
    )
end

function low_repa()          db.actor:change_character_reputation( -100  ) end
function low_repa_for_kill() db.actor:change_character_reputation( -1000 ) end

function up_repa( num )
    db.actor:change_character_reputation( num )
    if num < -100 then
        local name, sname = amk_names_lists.get_strings()
        amk.send_tip(
            "Народ, слыхали? Один сталкер по кличке Меченный таким козлом оказался! Своих мужиков кидает... Скот.",
            name .. " " .. sname, nil, 15, "uniq", "news", "gray"
        )
        local name2, sname2 = amk_names_lists.get_strings()
        amk.send_tip(
            "Да убивать за такое нужно! На месте! Чтоб другим неповадно было!",
            name2 .. " " .. sname2, 15, 15, "uniq", "news", "gray"
        )
    end
end

function marsh_oksana_foto()
    db.actor:give_talk_message( "", "ui\\ui_sak", Frect():set( 1050, 700, 250, 250 ), "iconed_foto_item" )
end

function esc_case_foto()
    db.actor:give_talk_message( "", "ui\\ui_icon_equipment", Frect():set( 500, 0, 100, 100 ), "iconed_foto_item" )
end

function fake_new_1_remove()  remove_npc_from_npc_targets( "fake_new_1"  ) end
function fake_new_2_remove()  remove_npc_from_npc_targets( "fake_new_2"  ) end
function fake_new_3_remove()  remove_npc_from_npc_targets( "fake_new_3"  ) end
function fake_new_4_remove()  remove_npc_from_npc_targets( "fake_new_4"  ) end
function fake_new_5_remove()  remove_npc_from_npc_targets( "fake_new_5"  ) end
function fake_new_6_remove()  remove_npc_from_npc_targets( "fake_new_6"  ) end
function fake_new_7_remove()  remove_npc_from_npc_targets( "fake_new_7"  ) end
function fake_new_8_remove()  remove_npc_from_npc_targets( "fake_new_8"  ) end
function fake_new_9_remove()  remove_npc_from_npc_targets( "fake_new_9"  ) end
function fake_new_10_remove() remove_npc_from_npc_targets( "fake_new_10" ) end
function fake_new_11_remove() remove_npc_from_npc_targets( "fake_new_11" ) end
function fake_new_12_remove() remove_npc_from_npc_targets( "fake_new_12" ) end
function fake_new_13_remove() remove_npc_from_npc_targets( "fake_new_13" ) end
function fake_new_14_remove() remove_npc_from_npc_targets( "fake_new_14" ) end

local lua_random_npces = {}

function register_lua_random_npc( obj )
    if IsStalker( obj ) then
        local community = obj:community()
        if
            obj.alive ~= nil
            and obj:alive() == true
            and alife():level_name( game_graph():vertex( obj.m_game_vertex_id ):level_id() ) ~= alife():level_name( alife():level_id() )
            and(
                   community == "stalker"
                or community == "dolg"
                or community == "freedom"
                or community == "green"
                or community == "ecolog"
            )
        then
            --ODS("#~C0 неписи: "..obj:profile_name().." :~C07")
            table.insert( lua_random_npces, { id = obj.id, prof = obj:profile_name() } )
        end
    end
end

function unregister_lua_random_npc(obj)
    if IsStalker( obj ) then
        if lua_random_npces ~= nil then
            for kk, vv in pairs( lua_random_npces ) do
                if vv.id == obj.id then table.remove( lua_random_npces, kk ) end
            end
        end
    end
end

function load_npc_targets()
    return xray_vars.load_table( nlc_vars, "npc_targets", {} )
end

function stalker_show( tip )
    local targets = load_npc_targets()
    for kk, vv in pairs( targets ) do
        if vv.tips == tip then
            show_search_stalker( vv.id )
            break
        end
    end
end

function stalker_bar_show()
    local bar_npces = {}
    for a, i in pairs( db.storage ) do
        objg = client_obj( a )
        if objg then
            if
                objg
                and IsStalker( objg )
                and objg:alive()
                and objg:character_community() == "stalker"
                and objg:story_id() == NONE_CL_SID
                and objg:position():distance_to( db.actor:position() ) > 25
            then
                table.insert(bar_npces, a )
            end
        end
    end
    if table.getn( bar_npces ) > 0 then
        local rand = lua_random( 1, table.getn( bar_npces ) )
        show_search_stalker( bar_npces[ rand ] )
        add_npc_id_to_npc_targets( bar_npces[ rand ], "bar_red_x16_dialog", "bar_red_x16" )
    end
end

function search_npc( profil, dialog, tips )
    local npces = {}
    for kk, vv in pairs( lua_random_npces ) do
        if vv.prof == profil then table.insert( npces, vv.id ) end
    end
    if table.getn( npces ) > 0 then
        add_npc_id_to_npc_targets( npces[ 1 ], dialog, tips )
        return true
    end
    return false
end

function show_search_stalker( npc_id )
    local text_who, text_where
    text_who, text_where = format_search_text( npc_id )
    if text_who ~= nil and text_who ~= "" and text_where ~= nil and text_where ~= "" then
        db.actor:give_talk_message(
            text_who, "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
        )
        db.actor:give_talk_message(
            text_where, "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
        )
    end
    if db.actor:object( "klava" ) ~= nil then
        local custom_msg = text_who .. "\n" .. text_where
        vergas_lib.add_record_in_klava( "custom", custom_msg )
    end
end

function format_search_text( id )
    local rwd = {}
    local text_who, text_where = "", ""
    local obj = g_sim:object( id )
    if obj == nil then return "" end
    local m_level = news_main.get_point_description(
        news_main.get_object_levelname( obj ),
        news_main.get_object_position( obj )
    )
    local name = news_main.get_npc_name( obj )
    text_who   = "Зовут его "..name
    text_where = m_level.." вроде он был последний раз..."
    return text_who, text_where
end

function add_npc_id_to_npc_targets( id, dialog, tip )
    local targets = load_npc_targets()
    local item    = { id = id, dialog = dialog, tips = tip }
    table.insert( targets, item )
    nlc_vars.npc_targets = targets
end

sak_dialog.add_npc_id_to_npc_targets = add_npc_id_to_npc_targets

function remove_npc_from_npc_targets( tip )
    local targets = load_npc_targets()
    for n, v in pairs( targets ) do
        if v.tips == tip then table.remove( targets, n ) end
    end
    nlc_vars.npc_targets = targets
end

function kill_targets() return load_npc_targets() end

function out_esc_bandits()
    local ids, cnt = registry.clsid_objects( CLID_STALKER, CLID_STALKER, true, nil, 15 )
    for n = 1, cnt do
        local id  = ids[ n ]
        local obj = client_obj( id )
        if obj and obj:name() and strpos( obj:name(), "esc_factory_bandit", 1, true ) then
            g_sim:release( g_sim:object( id ), true )
        end
    end
end

function hellcars_today()
    local ghour = level.get_time_hours()
    if ghour < 20 then return true
    else return false
    end
end

function hellcars_tomoro() return not hellcars_today() end

function have_any_art()
    for i, k in pairs( sak_inventory.rucksack ) do
        if
            strposx( i, "af_" )
            and not strposx( i, "af_full_akkum" )
            and not strposx( i, black_tip.section )
        then
            return true
        end
    end
end

function give_specified_art( list )
    for num, sec in ipairs( list )  do
        for i, names in pairs( sak_inventory.rucksack ) do
            if strposx( i, sect ) then
                for ii, name in ipairs( names ) do
                    local obj = g_sim:object( name )
                    if obj then
                        g_sim:release( obj, true )
                        sak.relocate_item( db.actor, "out", sect, 1 )
                        return true
                    end
                end
            end
        end
    end
    return false
end

function give_any_art()
    if      give_specified_art( table_aart    ) then
    elseif  give_specified_art( table_bart    ) then
    elseif  give_specified_art( table_capsule ) then
    elseif  give_specified_art( table_cart    ) then
    return  give_specified_art( table_dart    )
    end
    return true
end

function rand_plus()
    local rand = nlc_vars.stored_r_treas_items or 1
    local art  = amk_vars.r_art or 2
    local r    = ( rand + art ) % 3
    return r
end

function rand_1_pda_repair_dialog() return rand_plus() == 0 end
function rand_2_pda_repair_dialog() return rand_plus() == 1 end
function rand_3_pda_repair_dialog() return rand_plus() == 2 end

function pda_repair_dialog_done()
    local art = amk_vars.r_art or 3
    amk_vars.r_art = art + 1
end

function rand_1_dialog()
    local rand = nlc_vars.stored_r_treas_items or 1
    if rand == 1 then return true end
end

function rand_2_dialog()
    local rand = nlc_vars.stored_r_treas_items or 1
    if rand == 2 then return true end
end

function rand_3_dialog()
    local rand = nlc_vars.stored_r_treas_items or 1
    if rand == 3 then return true end
end

function is_darkscape() return level.name() == "k01_darkscape" end

function time_is_01() local m_h = level:get_time_hours() return m_h == 1  end
function time_is_02() local m_h = level:get_time_hours() return m_h == 2  end
function time_is_03() local m_h = level:get_time_hours() return m_h == 3  end
function time_is_04() local m_h = level:get_time_hours() return m_h == 4  end
function time_is_05() local m_h = level:get_time_hours() return m_h == 5  end
function time_is_06() local m_h = level:get_time_hours() return m_h == 6  end
function time_is_07() local m_h = level:get_time_hours() return m_h == 7  end
function time_is_08() local m_h = level:get_time_hours() return m_h == 8  end
function time_is_09() local m_h = level:get_time_hours() return m_h == 9  end
function time_is_10() local m_h = level:get_time_hours() return m_h == 10 end
function time_is_11() local m_h = level:get_time_hours() return m_h == 11 end
function time_is_12() local m_h = level:get_time_hours() return m_h == 12 end
function time_is_13() local m_h = level:get_time_hours() return m_h == 13 end
function time_is_14() local m_h = level:get_time_hours() return m_h == 14 end
function time_is_15() local m_h = level:get_time_hours() return m_h == 15 end
function time_is_16() local m_h = level:get_time_hours() return m_h == 16 end
function time_is_17() local m_h = level:get_time_hours() return m_h == 17 end
function time_is_18() local m_h = level:get_time_hours() return m_h == 18 end
function time_is_19() local m_h = level:get_time_hours() return m_h == 19 end
function time_is_20() local m_h = level:get_time_hours() return m_h == 20 end
function time_is_21() local m_h = level:get_time_hours() return m_h == 21 end
function time_is_22() local m_h = level:get_time_hours() return m_h == 22 end
function time_is_23() local m_h = level:get_time_hours() return m_h == 23 end
function time_is_24() local m_h = level:get_time_hours() return m_h == 0 or m_h == 24 end

function rand_game_1() local m = nlc_vars.stored_r_treas_items or 1 return m == 1 end
function rand_game_2() local m = nlc_vars.stored_r_treas_items or 1 return m == 2 end
function rand_game_3() local m = nlc_vars.stored_r_treas_items or 1 return m == 3 end

function have_info_flamethrower()
    if db.actor:has_info( "flame_reload_receipt_have" ) or db.actor:has_info( "game_over" ) then
        return true
    else
        return false
    end
end

function klava_done()
    if
        db.actor:has_info( "vergas_klava_done" )
        or not db.actor:has_info( "new_vergas_klava_rep" )
        or(
            db.actor:has_info("new_vergas_klava_rep" )
            and db.actor:has_info( "vergas_klava_rep_info" )
        )
    then
        return true
    else
        return false
    end
end

function not_klava_done() return not klava_done() end

local vergas_rs = lua_random( 1, 4 )

function need_amk_kanistra()
    if not timers.check_timer( "esc_benzinopause" ) then
        return true
    else
        return false
    end
end

function need_bar_kanistra()
    if not timers.check_timer( "bar_benzinopause" ) then
        return true
    else
        return false
    end
end

function no_need_amk_kanistra() return not need_amk_kanistra() end
function no_need_bar_kanistra() return not need_bar_kanistra() end

function esc_kanistra_add()
    timers.start_timer( "esc_benzinopause", 0, lua_random( 18, 24 ), 0 )
end

function bar_kanistra_add()
    timers.start_timer( "bar_benzinopause", 0, lua_random( 16, 18 ), 0 )
end

function kompass_have()
    return sak.have_items_count( "af_compass", 1 ) ~= false
end

function relocate_kompass_esc_mar( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "esc_tele_mar" )
end
function relocate_kompass_esc_dsc( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "esc_tele_dsc" )
end
function relocate_kompass_esc_mil( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "esc_tele_mil" )
end
function relocate_kompass_esc_yan( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "esc_tele_yan" )
end
function relocate_kompass_esc_prip( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "esc_tele_prip" )
end
function relocate_kompass_yan_esc( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "yan_tele_esc" )
end
function relocate_kompass_yan_mil( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "yan_tele_mil" )
end
function relocate_kompass_yan_prip( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "yan_tele_prip" )
end
function relocate_kompass_mil_esc( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "mil_tele_esc" )
end
function relocate_kompass_mil_yan( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "mil_tele_yan" )
end
function relocate_kompass_mil_prip( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "mil_tele_prip" )
end
function relocate_kompass_prip_esc( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "prip_tele_esc" )
end
function relocate_kompass_prip_yan( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "prip_tele_yan" )
end
function relocate_kompass_prip_mil( first_speaker, second_speaker )
    relocate_kompass( first_speaker, second_speaker, "prip_tele_mil" )
end

function relocate_kompass( first_speaker, second_speaker, way )
    for i, k in pairs( sak_inventory.rucksack ) do
        if strpos( i, "af_compass" ) and not strpos( i, "af_compass_dyn6d" ) then
            local obj_id = k[ 1 ]
            local obj    = g_sim:object( obj_id )
            if obj then
                local pk         = get_netpk( obj, 1 )
                local data       = pk:get()
                data.custom_data = way
                pk:set( data )
                sak_inventory.relocate_actor_items( second_speaker, "af_compass", 1 )
                break
            end
        end
    end
end

function return_kompass( first_speaker, second_speaker )
    for n = 1, 6 do
        local obj = first_speaker:object( "af_compass_dyn" .. n .. "d" )
        if obj then
            first_speaker:transfer_item( obj, second_speaker )
            sak.relocate_item( second_speaker, "in", "af_compass", 1 )
        end
    end
end

local stas_art  = "af_medusa"
local stas_bart = "af_gravi"

function stas_give_gameart( first_speaker, second_speaker )
    for i = 1, table.getn( table_aart ) do
        if sak.have_items_count( table_aart[ i ], 1 ) then
            sak_inventory.relocate_actor_items( second_speaker, table_aart[ i ], 1 )
            stas_art = table_aart[ i ]
            break
        end
    end
end

function stas_give_gamebart( first_speaker, second_speaker )
    for i = 1, table.getn( table_bart ) do
        if sak.have_items_count( table_bart[ i ], 1 ) then
            sak_inventory.relocate_actor_items( second_speaker, table_bart[ i ], 1 )
            stas_bart = table_bart[ i ]
            break
        end
    end
end


function stas_return_gameart( first_speaker, second_speaker )
    for n = 1, 6 do
        local obj = first_speaker:object( stas_art .. "_dyn" .. n .. "d" )
        if obj then
            first_speaker:transfer_item( obj, second_speaker )
            sak.relocate_item( second_speaker, "in", stas_art, 1 )
            break
        end
    end
end

function stas_return_gamebart( first_speaker, second_speaker )
    for n = 1, 6 do
        local obj = first_speaker:object( stas_bart .. "_dyn" .. n .. "d" )
        if obj then
            first_speaker:transfer_item( obj, second_speaker )
            sak.relocate_item( second_speaker, "in", stas_bart, 1 )
            break
        end
    end
end

function stas_out_gameart( first_speaker, second_speaker )
    for n = 1, 6 do
        local obj = first_speaker:object( stas_art .. "_dyn" .. n .. "d" )
        if obj then
            misc.release_obj( obj, 'stas_out_gameart' )
            break
        end
    end
end

function stas_out_gamebart( first_speaker, second_speaker )
    for n = 1, 6 do
        local obj = first_speaker:object( stas_bart .. "_dyn" .. n .. "d" )
        if obj then
            misc.release_obj( obj, 'stas_out_gamebart' )
            break
        end
    end
end

function gg_vrach()  return gg_character( 1 ) end
function gg_botan()  return gg_character( 2 ) end
function gg_oper()   return gg_character( 3 ) end
function gg_bandit() return gg_character( 4 ) end
function gg_spec()   return gg_character( 5 ) end
function gg_hunter() return gg_character( 6 ) end
function gg_igrok()  return gg_character( 7 ) end

function gg_character( tip )
    local character = math.floor( ( ( amk_vars.r_task_reward or 1 ) + ( amk_vars.x18_iq_check or 1 ) ) / 2 )
    return character == tip
end

function goodwill_above( needed ) -- above or equal (!)
    if not dialog_params then return false end
    needed = tonumber( needed or 0 )
    dump_table( dialog_params )
    npc_id = dialog_params.speaker_id
    if npc_id == 0 then npc_id = dialog_params.speaker2_id end
    local sp1 = client_obj( 0)
    local sp2 = client_obj( npc_id )
    if sp1 and sp2 then
        local now = sp2:goodwill( sp1 )
        wprintf(
            " check goodwill~C0A %s~C07 to~C0A %s~C0D %d~C0B >= ~C0D %d~C07",
            sp2:name(), sp1:name(), now, needed
        )
        if now >= needed then return true end
    end
    return false
end

function goodwill_less( needed ) return not goodwill_above( needed ) end

function add_vyvert()
    local rand = lua_random( 1, 4 )
    sak.create_items( db.actor, "af_vyvert_dyn" .. rand .. "d", 1 )
end

function add_gravi()
    local rand = lua_random( 2, 4 )
    sak.create_items( db.actor, "af_gravi_dyn" .. rand .. "d", 1 )
end

function add_electra_flash()
    local rand = lua_random( 1, 4 )
    sak.create_items( db.actor, "af_electra_flash_dyn" .. rand .. "d", 1 )
end

function add_electra_sparkler()
    local rand = lua_random( 1, 4 )
    sak.create_items( db.actor, "af_electra_sparkler_dyn" .. rand .. "d", 1 )
end

function add_electra_moonlight_capsule()
    local rand = lua_random( 1, 4 )
    sak.create_items( db.actor, "af_electra_moonlight_capsule_dyn" .. rand .. "d", 1 )
end

function take_sakharov_mil_kurjer_2nagrad()
    sak.create_items( db.actor, "medkit_scientic", 3 )
    sak.create_items( db.actor, "antirad", 8 )
    sak.create_items( db.actor, "suhpay", 3 )
end

function add_outfit_neumeha()
    local points = {
        1.1544072628021, 7.4998812675476, 18.371746063232, 241841, 488,
        -28.24542427063, 4.9999976158142, -3.124508619308, 231059, 682,
        16.459121704102, -1.925933718681, 2.3280971050262, 236709, 487,
        41.057662963867, 2.4978001117706, -16.40212631225, 279274, 663,
        28.686042785645, 4.8176741600037, -32.53207397460, 278644, 663,
        34.529563903809, 9.2246599197388, -20.56838417053, 278644, 663,
        69.733047485352, 0.5469009876251, 20.116687774658, 305852, 671,
        61.037391662598, 1.2793383598328, -20.49566268920, 304519, 671,
        -17.10790061950, 0.9850088357925, -11.40332603454, 304519, 671,
        -11.10072994232, -0.201545521616, 35.173683166504, 230399, 490
    }
    local rand = lua_random( 1, 10 ) * 5
    local obj  = amk.spawn_item( "physic_destroyable_object",
        sak.v3f( points[ rand - 4 ], points[ rand - 3 ], points[ rand - 2 ] ),
        points[ rand ], points[ rand - 1 ]
    )
    if obj then
        local pk         = get_netpk( obj, 1 )
        local data       = pk:get()
        data.visual_name = "physics\\box\\box_wood_01.ogf"
        data.custom_data = "[drop_box]\ncommunity = def_box\nitems = stalker_outfit_m3"
        data.mass        = 10
        pk:set( data )
    end
end

function add_boloto_dinamit()
    g_sim:create( "dynamite", sak.v3f( 273.89840698242, 9.7082767486572, 66.893074035645 ), 311890, 3527 )
end

function add_sanat_dinamit()
    g_sim:create( "dynamite", sak.v3f( -103.876633, 34.247833, 615.258545 ), 162, 3028 )
end

function add_kishka_dinamit()
    g_sim:create( "dynamite", sak.v3f( 238.81538391113, -3.7692546844482, 566.88269042969 ), 679465, 4102 )
end

function add_sidor_dinamit()
    g_sim:create( "dynamite", sak.v3f( -164.822265625, -19.815210342407, -129.96162414551 ), 81353, 55 )
end
-----------------------------------------------------------------------------------
function add_drunk_abakan()
    local points = {
        { -16.97483062744, 14.2, 46.94319915771, 9400,  3327 },
        { -18.81781578064, 14.2, 49.63105010986, 9005,  3327 },
        { 2.2395524978638, 15.7, 37.87773895263, 14221, 3330 },
        { 82.932456970215, 10.2, 33.28562927246, 38642, 3333 },
        { 81.270751953125, 10.2, 40.08720397949, 38189, 3333 },
        { 76.121879577637, 10.1, 26.44740104675, 36735, 3333 },
        { 64.034172058105, 11.5, 52.59435272216, 32969, 3336 },
    }
    local rand = lua_random( #points )
    g_sim:create( "wpn_abakan",
        sak.v3f( points[ rand ][ 1 ], points[ rand ][ 2 ], points[ rand ][ 3 ] ),
        points[ rand ][ 4 ], points[ rand ][ 5 ]
    )
end
-----------------------------------------------------------------------------------
function add_drunk_dolg_treasure()
    local treases = { 2113, 5864 }
    local sid     = lua_random( 1, #treases )
    local obj     = g_sim:story_object( treases[ sid ] )
    if obj then
        misc.spawn_to( "drunk_dolg_letter", obj )
        misc.spawn_to( "vodka", obj )
    end
end

function add_stalker_treasure()
    local tbl = {
        "af_soul_capsule_dyn2d",
        "af_cristall_capsule_dyn2d",
        "af_gold_fish_capsule_dyn3d",
        "af_night_star_capsule_dyn3d",
    }
    local obj = g_sim:story_object( story_ids.red_treasure_4 )
    level.map_add_object_spot( obj.id, "crlc_big_treasure3", "Тайник сталкера" )
    if obj then
        for _, v in ipairs( tbl ) do
            misc.spawn_to( v, obj )
        end
    end
end

function add_skull_gift()
    local obj1 = g_sim:story_object( story_ids.bar_inventory_box_0006 )
    if obj1 then
        local item  = ""
        local count = lua_random( 1, 2 )
        for i = 1, count do
            item = table_dart[ lua_random( table.getn( table_dart ) ) ]
            g_sim:create( item, obj1.position, obj1.m_level_vertex_id, obj1.m_game_vertex_id, obj1.id )
        end
    end
end

function add_hunters_treasure( num )
    local tbl = {
        story_ids.dsc_inventory_box_10,
        story_ids.mar_q_n_13,
        story_ids.red_treasure_25
    }
    local obj1 = g_sim:story_object( tbl[ num ] )
    if obj1 then
        local item  = ""
        local count = lua_random( 4, 5 )
        for i = 1, count do
            item = nagrad.level_5[ lua_random( table.getn( nagrad.level_5 ) ) ]
            misc.spawn_to( item, obj1 )
        end
    end
end

function add_hunters_toz( num )
    local tbl = {
        story_ids.dsc_inventory_box_17,
        story_ids.dsc_inventory_box_03,
        story_ids.dsc_inventory_box_05,
        story_ids.dsc_inventory_box_07
    }
    local obj1 = g_sim:story_object( tbl[ num ] )
    g_sim:create( "wpn_toz34_m1", obj1.position, obj1.m_level_vertex_id, obj1.m_game_vertex_id, obj1.id )
    sak.off_on( obj1 )
end

function fill_agr_u_treasure()
    local obj1 = g_sim:story_object( story_ids.agr_und_inventory_box )
    g_sim:create( "redcatcher_albom",
        obj1.position, obj1.m_level_vertex_id, obj1.m_game_vertex_id, obj1.id
    )
end

function fill_red_terasure()
    local obj1 = g_sim:story_object( story_ids.red_inventory_box_01 )
    local rand = lua_random( 3, 5 )
    for a = 1, rand do
        local section = table_bart[ lua_random( 1, #table_bart ) ]
        local b       = lua_random( 2, 4 )
        if
            not strpos( section, "_new", 1, true )
            and not strpos( section, "_dummy_", 1, true )
        then
            section = section .. "_dyn" .. b .. "d"
        end
        g_sim:create( section,
            obj1.position, obj1.m_level_vertex_id, obj1.m_game_vertex_id, obj1.id
        )
    end
    g_sim:create( "red_shtreck_letter",
        obj1.position, obj1.m_level_vertex_id, obj1.m_game_vertex_id, obj1.id
    )
end

function dar_document3_have()
    return
        sak.have_items_count( "dar_document3", 1 )
        and not sak.have_items_count( "dar_document5", 1 )
end

function dar_document5_have()
    return
        sak.have_items_count( "dar_document5", 1 )
        and not sak.have_items_count( "dar_document3", 1 )
end

function dar_document35_have()
    return
        sak.have_items_count( "dar_document5", 1 )
        and sak.have_items_count( "dar_document3", 1 )
end

function start_time_ivancov_good()
    timers.start_timer( "time_ivancov_done", 0, 17, 15, "sak.ivancov_case_good()" )
end

function start_time_ivancov_good_done()
    timers.start_timer( "time_ivancov_good_done", 1, 19, 15, "sak.ivancov_case_good()" )
end

function fill_ivancov_treasure()
    local obj1 = g_sim:story_object( story_ids.bar_inventory_box_0018 )
    local rand = lua_random( 3, 5 )
    for a = 1, rand do
        local section = table_aart[ lua_random( 1, #table_bart ) ]
        local b       = lua_random( 2, 4 )
        if
            not strpos( section, "_new", 1, true )
            and not strpos( section, "_dummy_", 1, true )
        then
            section = section .. "_dyn" .. b .. "d"
        end
        g_sim:create( section,
            obj1.position, obj1.m_level_vertex_id, obj1.m_game_vertex_id, obj1.id
        )
    end
end

function start_time_ivancov_case()
    timers.start_timer( "time_ivancov_case", 1, 1, 15, "ivancov_case_enemy()" )
end

function stop_time_ivancov_case()
    timers.stop_timer( "time_ivancov_case" )
end

function ivancov_case_enemy()
    local ivancov = level_object_by_sid( 505 )
    if ivancov then
    ivancov:set_relation( game_object.enemy, db.actor )
    end
    xr_gulag.setGulagEnemy( "bar_dolg_general", db.actor )
    xr_gulag.setGulagEnemy( "bar_zastava", db.actor )
    xr_gulag.setGulagEnemy( "bar_zastava_2", db.actor )
end

function dolg_mil_enemy() xr_gulag.setGulagEnemy( "mil_dolg", db.actor ) end

function text_talk_dialog( text_talk )
    db.actor:give_talk_message(
        "%c[255,216,186,140]" .. blowout_when .. " " .. text_talk,
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0 ), "simple_answer_item"
    )
end


function atp_bandit_pda_have()
    return sak.have_items_count( "bar_lucky_pda", 1 ) ~= false
end

function atp_bandit_pda_not_have() return not atp_bandit_pda_have() end

function add_bar_dolg_debt_dialog()
    search_npc( "mil_Svoboda_regular", "bar_dolg_debt_dialog", "bar_dolg_debt_1" )
end
-----------------------------------------------------------
function add_udacha_art()
    sak.create_items( db.actor, "af_unknown_21_new", 1 )
end
-----------------------------------------------------------
function add_sbruy_desertir()
    sak.create_items( db.actor, "dolg_gaz_outfit_m1", 1 )
    sak.create_items( db.actor, "wpn_abakan", 1 )
end

function add_barmen_kill_stalker_1()
    sak.create_items( db.actor, "af_unknown_9_new", 1 )
    sak.create_items( db.actor, "af_unknown_17_new", 1 )
end

function add_scarman_remember()
    sak.send_tip(
        "Этот мужик со шрамом... Кто-то знакомый, вроде?",
        "Воспоминание", 2, 20, "g_g", "rememb", "yellow"
    )
end

function luber_ammunition()
    treasure_manager.get_treasure_manager():give_treasure( "aver_secret_luber_ammunition" )
end

function rashpil_treasure()
    treasure_manager.get_treasure_manager():give_treasure( "dsc_secret_rashpil" )
end

function rashpil_2treasure()
    local obj1 = g_sim:story_object( story_ids.dsc_inventory_box_09 )
    for a = 1, lua_random( 10, 14 ) do
        g_sim:create( "grenade_f1",
            obj1.position, obj1.m_level_vertex_id, obj1.m_game_vertex_id, obj1.id
        )
    end
    local spot = lua_random( 1, 3 )
    level.map_add_object_spot( obj1.id, "crlc_big_treasure" .. spot, "Тайник с гранатами" )
end

function lost_pda_1spot()
    local obj1 = g_sim:story_object( story_ids.aver_metka_01 )
    if obj1 then
        local spot = lua_random( 1, 3 )
        level.map_add_object_spot(
            obj1.id, "crlc_big_treasure"..spot, "Вроде как пещерка со складом должна быть."
        )
    end
end

function have_big_akkum()
    return sak.have_items_count( "item_battery_03", 1 )
end

function give_af_full_akkum()
    sak_inventory.release_actor_items( "af_full_akkum", 1 )
end

function af_full_akkum_2have()
    return test.have_remove_items_count_cond( "af_full_akkum", 2, 0.98, false )
end

function give_2af_full_akkum()
    test.have_remove_items_count_cond( "af_full_akkum", 2, 0.98, true )
end

function add_af_full_akkum()
    sak.create_items( db.actor, "af_full_akkum", 1 )
end

function add_kulinar_voron_box()
    sak.create_items( db.actor, "kulinar_voron_box", 1 )
    start_time( "start_kulinar_voron_time" )
end

function af_full_akkum_have()
    return sak.have_items_count( "af_full_akkum", 1 )
end

function add_point_1_scaner()
    local obj = g_sim:story_object( story_ids.scaner_1_space_restrictor )
    if obj then
        amk.add_spot_on_map( obj.id, "crlc_small", "Место установки сканера №3" )
    end
end

function add_point_2_scaner()
    local obj = g_sim:story_object( story_ids.scaner_2_space_restrictor )
    if obj then
        amk.add_spot_on_map( obj.id, "crlc_small", "От входа на территорию - слева разрушенные постройки, подвал. От выхода из подвала - на север, обогнуть озеро по правому берегу и подняться на обрыв, к поваленному дереву. Обойти его слева и далее идти на запад, на небольшой пригорок чуть левее какого-то 'уродливого' дерева. Не доходя метра три до этого дерева, на вершине пригорка." )
    end
end

function add_point_3_scaner()
    local obj = g_sim:story_object( story_ids.scaner_3_space_restrictor )
    if obj then
        amk.add_spot_on_map( obj.id, "crlc_small", "От вагончика за забор и вдоль него на север. Сразу за поваленным деревом два камня рядом. От них - строго на север большой валун метрах в 15. На его вершине точка замера." )
    end
end

function add_blockpost_case()
    sak.create_items( db.actor, "quest_case_01", 1 )
    local obj = g_sim:story_object( story_ids.esc_quest_case_01 )
    if obj then g_sim:release( obj, true ) end
end

function add_art_capsule()
    local art_capsule = ( nlc_vars.capsule_ready or "af_night_star_capsule_dyn1d" )
    local art         = string.gsub( art_capsule, "_capsule", "" )
    sak.create_items( db.actor, art, 1 )
    nlc_vars.capsule_ready = nil
end

function out_podsumok()
    local obj = g_sim:story_object( story_ids.esc_podsumok_01 )
    if obj then g_sim:release( obj, true ) end
end

function give_food_by_tm()
    sak_inventory.release_actor_items( "bread", 10 )
    sak_inventory.release_actor_items( "conserva", 10 )
end

function have_food_by_tm()
    return
        sak.have_items_count( "bread", 10 ) ~= false
        and sak.have_items_count( "conserva", 10 ) ~= false
end

function give_food_by_shema()
    sak_inventory.release_actor_items( "bread", 5 )
    sak_inventory.release_actor_items( "conserva", 5 )
    vergas_lib.search_items( "energy_drink", 10, 2 )
end

function have_food_by_shema()
    return
        sak.have_items_count( "bread", 5 ) ~= false
        and sak.have_items_count( "conserva", 5 ) ~= false
        and vergas_lib.search_items( "energy_drink", 10, 1 ) ~= false
end

function give_wpnm16()
    if sak.have_items_count( "wpn_sig550", 1 ) then
        sak_inventory.release_actor_items( "wpn_sig550", 1 )
    elseif sak.have_items_count( "wpn_q_sig550", 1 ) then
        sak_inventory.release_actor_items( "wpn_q_sig550", 1 )
    end
end

function have_wpnm16()
    return
        sak.have_items_count( "wpn_sig550", 1 ) ~= false
        or sak.have_items_count( "wpn_q_sig550", 1 ) ~= false
end

function take_treasure_kirpich( first_speaker, second_speaker )
    treasure_manager.get_treasure_manager():give_treasure( "mar_secret_kirpich" )
end

function add_val_escort_PDA()
    sak.create_items( db.actor, "und_pda", 1 )
    local npc = level_object_by_sid( 9542 )
    if npc and npc:alive() and npc.online then
        npc:set_character_community( "stalker", 0, 0 )
    else
        local obj = g_sim:story_object( story_ids.shersh )
        if obj then
            local pk             = get_netpk( obj )
            local data           = pk:get()
            data.community_index = 3
            pk:set( data )
        end
    end
end

function give_2full_bank( first_speaker, second_speaker )
    sak_inventory.relocate_actor_items( second_speaker, "banka_full", 2 )
end

function give_full_bank( first_speaker, second_speaker )
    sak_inventory.relocate_actor_items( second_speaker, "banka_full", 1 )
end

function havent_3_card() return sak.have_items_count( "rad_cart", 3 ) == false end
function have_psy_pribor() return sak.have_items_count( "decoder2", 1 ) ~= false end
function havent_psy_pribor() return sak.have_items_count( "decoder2", 1 ) == false end

function add_klyk_med_spot1() sak.add_klyk_med_spots( 9301 ) end
function add_klyk_med_spot2() sak.add_klyk_med_spots( 9302 ) end
function add_klyk_med_spot3() sak.add_klyk_med_spots( 9303 ) end
function remove_klyk_med_spot1() sak.remove_klyk_med_spots( 9301 ) end
function remove_klyk_med_spot2() sak.remove_klyk_med_spots( 9302 ) end
function remove_klyk_med_spot3() sak.remove_klyk_med_spots( 9303 ) end

function add_yan_izm_spot1() sak.add_yan_izm_spots( 9307 ) end
function add_yan_izm_spot2() sak.add_yan_izm_spots( 9308 ) end
function add_yan_izm_spot3() sak.add_yan_izm_spots( 9309 ) end
function remove_yan_izm_spot1() sak.remove_klyk_med_spots( 9307 ) end
function remove_yan_izm_spot2() sak.remove_klyk_med_spots( 9308 ) end
function remove_yan_izm_spot3() sak.remove_klyk_med_spots( 9309 ) end

function add_rad_izm_spot1() sak.add_rad_izm_spots( 9310 ) end
function add_rad_izm_spot2() sak.add_rad_izm_spots( 9311 ) end
function add_rad_izm_spot3() sak.add_rad_izm_spots( 9312 ) end
function remove_rad_izm_spot1() sak.remove_rad_izm_spots( 9310 ) end
function remove_rad_izm_spot2() sak.remove_rad_izm_spots( 9311 ) end
function remove_rad_izm_spot3() sak.remove_rad_izm_spots( 9312 ) end

function add_ecolog_weapon()
    local sid_ecolog = {
        story_ids.bar_ecolog_professor,
        story_ids.bar_ecolog_crush_1,
        story_ids.bar_ecolog_crush_2,
        story_ids.bar_ecolog_crush_3
    }
    local g_sim = alife()
    for i = 1, table.getn( sid_ecolog ) do
        local obj = g_sim:story_object( sid_ecolog[ i ] )
        if obj then
            g_sim:create( "wpn_ak74u",
                obj.position, obj.m_level_vertex_id, obj.m_game_vertex_id, obj.id
            )
            g_sim:create_ammo( "ammo_5.45x39_ap",
                obj.position, obj.m_level_vertex_id, obj.m_game_vertex_id, obj.id, 120
            )
        end
    end
end

function monolit_instruments_spawn()
    g_sim:create( "monolit_instruments_case", sak.v3f( 188.23, -0.14, -184.93 ), 335280, 402 )
end

function take_toz34m( first_speaker, second_speaker )
    first_speaker:transfer_item( first_speaker:object( "wpn_hunters_toz_new" ), db.actor )
    sak.relocate_item( second_speaker, "in", "wpn_hunters_toz_new", 1 )
end

function take_mutant_psevdodog_tail( first_speaker, second_speaker )
    local obj = misc.spawn_to( "mutant_psevdodog_tail", db.actor )
    if obj then
        schedule.add ( "t_m_p_t", "sak_dialog.take_psev_tail("..obj.id..")", 200 )
        sak.relocate_item( second_speaker, "in", "mutant_psevdodog_tail", 1 )
    end
end

function take_psev_tail( id )
    params.obj_condition ( id, 0.2 )
    local objd     = g_sim:object( id )
    local pk       = get_netpk( objd, 1 )
    local data     = pk:get()
    data.condition = 0.2
    pk:set( data )
end

function take_fort_m( first_speaker, second_speaker )
    first_speaker:transfer_item( first_speaker:object( "wpn_fort_m1" ), db.actor )
    sak.relocate_item( second_speaker, "in", "wpn_fort_m1", 1 )
end

function have_reload_fuel()
    return
        sak.have_items_count( "amk_kanistra", 1 ) ~= false
        and sak.have_items_count( "amk_ballon", 1 ) ~= false
end

function give_reload_fuel()
    sak_inventory.release_actor_items( "amk_kanistra", 1 )
    sak_inventory.release_actor_items( "amk_ballon", 1 )
end

function have_flame_reload_items()
    return
        sak.have_items_count( "amk_kanistra", 3 ) ~= false
        and sak.have_items_count( "amk_ballon", 3 ) ~= false
end

function give_flame_reload_items()
    sak_inventory.release_actor_items( "amk_kanistra", 3 )
    sak_inventory.release_actor_items( "amk_ballon", 3 )
end

function take_treasure_by_toz( first_speaker, second_speaker )
    treasure_manager.get_treasure_manager():give_treasure( "val_secret_oreh" )
end

function take_treasure_oreh_by_shkura( first_speaker, second_speaker )
    treasure_manager.get_treasure_manager():give_treasure( "dead_secret_oreh" )
end

function fill_dead_oreh_treasure()
    local tbl = { "af_cry_3", "af_spirit_3", "af_armor_3", "af_kol_3", "af_babka_3" }
    local obj = g_sim:story_object( story_ids.dc_inventory_box_cherdak_build )
    level.map_add_object_spot(
        obj.id, "crlc_big_treasure3", "Где-то тут хабар Призрака"
    )
    if obj then
        misc.spawn_to( "wpn_m110", obj )
        misc.spawn_to( tbl[ amk_vars.r_task_reward or 1 ], obj )
        tbl = { "antirad", "medkit_army", "ammo_7.62x51_ap", "conserva" }
        for _, v in ipairs( tbl ) do
            for i = 1, 6 do misc.spawn_to( v, obj ) end
        end
    end
end

function take_level_changer_by_toz( first_speaker, second_speaker )
    sak.add_new_garbage_116()
    sak.add_new_darkvalley_117()
end

function give_1_dm_bandits( first_speaker, second_speaker )
    dialogs.relocate_item_section( second_speaker, "wpn_hunters_toz_new", "out" )
end


function have_psy_shield() return sak.have_items_count( "item_psi_helmet_02", 1 ) end
function not_have_psy_shield() return not have_psy_shield() end

function give_flame_reload_kanistra()
    if sak.have_items_count( "amk_kanistra", 3 ) ~= false then
        sak_inventory.release_actor_items( "amk_kanistra", 3 )
        local cnt = ( nlc_vars.kanistra_screw or 0 )
        nlc_vars.kanistra_screw = cnt + 3
    elseif sak.have_items_count( "amk_kanistra", 2 ) ~= false then
        sak_inventory.release_actor_items( "amk_kanistra", 2 )
        local cnt = ( nlc_vars.kanistra_screw or 0 )
        nlc_vars.kanistra_screw = cnt + 2
    elseif sak.have_items_count( "amk_kanistra", 1 ) ~= false then
        sak_inventory.release_actor_items( "amk_kanistra", 1 )
        local cnt = ( nlc_vars.kanistra_screw or  0 )
        nlc_vars.kanistra_screw = cnt + 1
    end
end

function give_flame_reload_ballon()
    if sak.have_items_count( "amk_ballon", 3 ) ~= false then
        sak_inventory.release_actor_items( "amk_ballon", 3 )
        local cnt = ( nlc_vars.ballon_screw or 0 )
        nlc_vars.ballon_screw = cnt + 3
    elseif sak.have_items_count( "amk_ballon", 2 ) ~= false then
        sak_inventory.release_actor_items( "amk_ballon", 2 )
        local cnt = ( nlc_vars.ballon_screw or 0 )
        nlc_vars.ballon_screw = cnt + 2
    elseif sak.have_items_count( "amk_ballon", 1 ) ~= false then
        sak_inventory.release_actor_items( "amk_ballon", 1 )
        local cnt = ( nlc_vars.ballon_screw or 0 )
        nlc_vars.ballon_screw = cnt + 1
    end
end

function have_flame_reload_not_ballons()
    local cnt = ( nlc_vars.ballon_screw or 0 )
    return cnt < 3
end

function have_flame_reload_all_ballons()
    local cnt  = ( nlc_vars.ballon_screw or 0 )
    local cnt2 = ( nlc_vars.kanistra_screw or 0 )
    return cnt >= 3 and cnt2 < 3
end

function have_flame_reload_not_kanistras()
    local cnt = ( nlc_vars.kanistra_screw or 0 )
    return cnt < 3
end

function have_flame_reload_all_kanistras()
    local cnt  = ( nlc_vars.ballon_screw or 0 )
    local cnt2 = ( nlc_vars.kanistra_screw or 0 )
    return cnt < 3 and cnt2 >= 3
end

function have_flame_reload_full()
    local cnt  = ( nlc_vars.ballon_screw or 0 )
    local cnt2 = ( nlc_vars.kanistra_screw or 0 )
    return cnt >= 3 and cnt2 >= 3
end

function clear_flame_reload_shurup()
    nlc_vars.ballon_screw   = nil
    nlc_vars.kanistra_screw = nil
end

function take_black_tip()
    if black_tip.have_black_tip() then return end
    sak.create_items( db.actor, black_tip.section, 1 )
end

function out_black_tip()
    sak_inventory.release_actor_items( black_tip.section, 1 )
    db.actor:disable_info_portion( "info_black_tip" )
    nlc_vars.catched_bt = nil
end

function have_black_tip()    return ( black_tip.have_black_tip() ~= false ) end
function no_have_black_tip() return ( black_tip.have_black_tip() == false ) end

function give_black_tip()
    sak_inventory.release_actor_items( black_tip.section, 1 )
end

function take_gift_by_weapon()
    sak.add_new_military()
    treasure_manager.get_treasure_manager():give_treasure( "mil_secret_kruglov" )
    relocate_money( db.actor, 2500, "in" )
end

function take_gift_by_flash()
    sak.add_new_military()
    treasure_manager.get_treasure_manager():give_treasure( "mil_secret_kruglov" )
    relocate_money( db.actor, 25000, "in" )
end

function take_gift_by_fmradio()
    sak.add_new_military()
    treasure_manager.get_treasure_manager():give_treasure( "mil_secret_kruglov" )
    relocate_money( db.actor, 5000, "in" )
end

function take_yan_secret_kruglov()
    treasure_manager.get_treasure_manager():give_treasure( "yan_secret_kruglov" )
end

function take_gift_by_letter()
    sak.create_items( db.actor, "ecolog_outfit", 1 )
    relocate_money( db.actor, 1500, "in" )
end

function has_upgrade_info()
    if
        db.actor:has_info( "agr_krot_secret_info" )
        or db.actor:has_info( "bar_darklab_document_gain" )
    then
        return true
    else
        return false
    end
end

function havent_kruglov_weapon_done()
    if
            db.actor:has_info( "kruglov_weapon_have_1" )
        and db.actor:has_info( "kruglov_weapon_have_2" )
        and db.actor:has_info( "kruglov_weapon_have_3" )
        and db.actor:has_info( "kruglov_weapon_have_4" )
    then
        return false
    else
        return true
    end
end

function have_kruglov_weapon_done()
    if
            db.actor:has_info( "kruglov_weapon_have_1" )
        and db.actor:has_info( "kruglov_weapon_have_2" )
        and db.actor:has_info( "kruglov_weapon_have_3" )
        and db.actor:has_info( "kruglov_weapon_have_4" )
    then
        return true
    else
        return false
    end
end

function volkodav_have_start()
    if
        db.actor:has_info( "volkodav_dt_shema_start" )
        or db.actor:has_info( "volkodav_dt_art_start" )
    then
        return true
    else
        return false
    end
end

function volkodav_have_done()
    if
        db.actor:has_info( "volkodav_dt_shema_done" )
        or db.actor:has_info( "volkodav_dt_art_done" )
    then
        return true
    else
        return false
    end
end


sidor_blowout_dialog = {
    "потрясёт нас.",
    "снова ударит.",
    "будем все, как тараканы разбегаться.",
    "мало не покажется..."
}

docent_blowout_dialog  = { "как жахнет!", "мало не покажется..." }
saharov_blowout_dialog = { "думаю начнётся...", "может начаться новый цикл." }

blowout_when = ""

function do_blow_time()
    local when = ""
    if (( amk_vars.blowout or -1 ) > -1 and ( amk_vars.blowout or -1 ) < 5 ) then return end
    local name, delay = timers.check_timer( "blow_shift", "amk_mod.Run_Blowout_pp()" )
    local diff = delay / 60
    if diff < 1 then
        when = "вот-вот наверно, минут через десять, может двадцать"
    elseif diff < 2 then
        when = "через час-другой"
    elseif ( diff >= 2 and diff <= 4 ) then
        when = "через пару часов"
    elseif ( diff > 4 and diff <= 8 ) then
        when = "часов через 6-7"
    elseif diff > 8 then
        local m_h = level:get_time_hours()
        local n_h = m_h + diff
        if ( n_h >= 9  and n_h < 11 ) then when = "утром" end
        if ( n_h >= 11 and n_h < 14 ) then when = "днем" end
        if ( n_h >= 14 and n_h < 18 ) then when = "после обеда" end
        if ( n_h >= 18 and n_h < 22 ) then when = "вечером" end
        if ( n_h >= 22 and n_h < 30 ) then when = "ночью" end
        if ( n_h >= 30 and n_h < 34 ) then when = "завтра утром" end
        if ( n_h >= 34 and n_h < 38 ) then when = "завтра днем" end
        if ( n_h >= 38 and n_h < 42 ) then when = "завтра после обеда" end
        if ( n_h >= 42 and n_h < 50 ) then when = "завтра ночью" end
        if ( n_h >= 50              ) then when = "через день, может больше" end
    end
    blowout_when = when
end

function select_blowout_dialog( name )
    local lines = sak_dialog[ name ]
    local m     = lua_random( #lines )
    return lines[ m ]
end

function sidor_blowout_dialog_end()
    local m_end = select_blowout_dialog( "sidor_blowout_dialog" )
    text_talk_dialog( m_end )
end

function docent_blowout_dialog_end()
    local m_end = select_blowout_dialog( "docent_blowout_dialog" )
    text_talk_dialog( m_end )
end

function saharov_blowout_dialog_end()
    local m_end = select_blowout_dialog( "saharov_blowout_dialog" )
    text_talk_dialog( m_end )
end

function give_bun_docs( first_speaker, second_speaker )
    out_item_section_from_actor( first_speaker, second_speaker, "bun_document", "all" )
end

function give_x8_docs( first_speaker, second_speaker )
    local kol = out_item_section_from_actor( first_speaker, second_speaker, "x8_document", "all" )
    local n = ( nlc_vars.kol_x8_docs or 0 )
    nlc_vars.kol_x8_docs = ( n + kol )
end

function show_x8_docs( first_speaker, second_speaker )
    local kol = #sak_inventory.rucksack[ "x8_document" ]
    sak.relocate_item( db.actor, "out", "x8_document", kol )
    nlc_vars.kol_x8_docs = ( kol )
end

function return_x8_docs( first_speaker, second_speaker )
    local n = ( nlc_vars.kol_x8_docs or 0 )
    sak.relocate_item( second_speaker, "in", "x8_document", n )
    nlc_vars.kol_x8_docs = 0
end

function x8_docs_all_have()
    local n = ( nlc_vars.kol_x8_docs or 0 )
    local m = amk_vars.r_task_reward or 1
    return n > ( 19 + m )
end

function x8_docs_not_all_have() return not x8_docs_all_have() end

function add_memory_module()
    amk.spawn_item( "memory_module", sak.v3f( 45.0, -22.48, 51.25 ), 3710, 12129 )
    amk.spawn_item( "memory_module", sak.v3f( 45.9, -22.48, 51.25 ), 3710, 12194 )
end

function add_esc_repair()
    local obj = g_sim:story_object( story_ids.esc_soldier_repair )
    if not obj then misc.spawn_by_name( "esc_soldier_repair" ) end
end

function add_x10_docs_botans()
    local obj = g_sim:story_object( story_ids.pesh_inventory_box_0003 )
    if obj then
        g_sim:create( "x10_document2",
            obj.position, obj.m_level_vertex_id, obj.m_game_vertex_id, obj.id
        )
    end
end

function harddisc_wiew()
    db.actor:give_talk_message(
        "", "ui\\ui_icon_equipment", Frect():set(750, 850, 100, 50 ), "iconed_item"
    )
end

function give_x10_harddisc( first_speaker, second_speaker )
    local kol = out_item_section_from_actor(
        first_speaker, second_speaker, "hard_disc", "all"
    )
    local n   = nlc_vars.kol_harddisc or 0
    nlc_vars.kol_harddisc = n + kol
end

function x10_harddisc_all_have()
    local n = nlc_vars.kol_harddisc or 0
    return n > 9
end

function x10_harddisc_not_all_have() return not x10_harddisc_all_have() end

function text_code_x10()
    local n = amk_vars.x18_iq_check or 1
    local text = {
        "56326", "85695", "75962",
        "86596", "85369", "35692",
        "39258", "54962", "47852"
    }
    db.actor:give_talk_message(
        "%c[255,216,186,140]" .. text[ n ], "ui\\ui_iconsTotal",
        Frect():set(0, 0, 0, 0 ), "simple_answer_item"
    )
    local need = "labx10_physic_destroyable_object_000"
    local obj  = registry.find_object( need, true, server_obj )
    if obj then
        if strpos( obj:name(), need, 1, true ) then
            local pk         = get_netpk( obj, 1 )
            local data       = pk:get()
            data.visual_name = "physics\\small_trash\\wood_board_br_01b"
            data.physic_type = 3
            pk:set( data )
        end
    end
    nlc_vars.kol_harddisc = nil
end

--документы в Кишке спавнятся в колонне под мостом
function add_x18_docs()
    local rand = ( amk_vars.r_task_reward or 1 ) * 5
    local points = {
        387.678253, -0.766031, 363.181488, 878433, 4133,
        380.572052, -1.433104, 360.417877, 868026, 4133,
        392.085449, -0.783644, 328.054657, 886020, 4140,
        388.560181, -1.292860, 315.809753, 875804, 4140,
        398.291473, -1.769724, 309.335510, 900671, 4140
    }
    amk.spawn_item( "dar_document3",
        sak.v3f( points[ rand - 4 ], points[ rand - 3 ], points[ rand - 2 ] ),
        points[ rand ], points[ rand - 1 ]
    )
    points = {
        38.496116638184, -10.814287185669, -6.2668147087097, 7333, 1136,
        14.275232315063, -10.815458297729, -16.191423416138, 4869, 1139,
        39.742706298828, -6.1400866508484, -15.511281013489, 7418, 1141,
        36.299995422363, -5.6154961585999, -35.950675964355, 7228, 1142,
        5.0489687919617, -10.900365829468,  12.071053504944, 3555, 1156
    }
    amk.spawn_item( "dar_document5",
        sak.v3f( points[ rand - 4 ], points[ rand - 3 ], points[ rand - 2 ] ),
        points[ rand ], points[ rand - 1 ]
    )
end

function sherstyk_shkura_time()
    local day = level.get_time_days()
    nlc_vars.sherstyk_shkura_time = day
end

function is_ready_time_sherstyk_shkura()
    local day     = level.get_time_days()
    local old_day = nlc_vars.sherstyk_shkura_time or 32
    if day > old_day then return true else return false end
end

function not_ready_time_sherstyk_shkura()
    return not is_ready_time_sherstyk_shkura()
end

function blow_time()
    if ( ( amk_vars.blowout or -1 ) > -1 and ( amk_vars.blowout or -1 ) < 5 ) then return true end
end

function no_blow_time() return not blow_time() end

function prepare_dialogs() init_xvars() end

function init_module()
    prepare_dialogs()
    sak_repair_dialog.init_module()
end

function late_init() end

function on_before_save()
    nlc_vars.repair = t_repair
end

if not _G.sak_repair_dialog then
    abort( "cannot include sak_repair_dialog" )
end

function add_vil_wolf_letter()
    local obj1 = g_sim:story_object( story_ids.lost_inventory_box_02 )
    if obj1 then
        misc.spawn_to( "zapiska_volk", obj1 )
        sak.off_on( obj1 )
    end
end

function added_vil_ranger_treasure()
    local tbl = {
        { -72.722, 19.120, -55.497, 3325, 1163  },
        {  3.5773, 12.323, -67.840, 3329, 14319 },
        {  90.055, 12.052, -35.607, 3336, 41192 },
        {  81.520, 17.663,  30.142, 3333, 38178 },
        {  49.912, 8.5649,  91.111, 3331, 29325 },
        {  1.1138, 19.127,  41.183, 3330, 13866 },
        { -17.132, 17.267,  46.461, 3327, 9399  }
    }
    local ind = amk_vars.r_task_reward + amk_vars.r_treas_items - 1
    if ind > 7 or ind < 1 then ind = 1 end
    local obj = test.spawn_no_ai( "rukzak_inventory_box",
        sak.v3f( tbl[ ind ][ 1 ], tbl[ ind ][ 2 ], tbl[ ind ][ 3 ] ),
        tbl[ ind ][ 4 ], tbl[ ind ][ 5 ]
    )
    misc.process_spawn()
    if obj then
        local tbl = {
            "af_medusa_dyn1d",
            "af_drops_dyn5d",
            "af_blood_dyn5d",
            "af_rusty_thorn_dyn1d",
            "volk_pda"
        }
        for _, v in ipairs( tbl ) do misc.spawn_to( v, obj ) end
        sak.off_on( obj )
    end
end

function add_volk_prize_treasure( num )
    num = tonumber( num )
    local ind = amk_vars.r_task_reward or 1
    local tbl = {
        {
            { 552.616, -49.062, -86.3810, 2044, 191791 },
            { 581.159, -45.004, -94.1100, 1893, 205899 },
            { 639.103, -47.636, -161.479, 1887, 225377 },
            { 567.766, -41.192, -256.612, 1863, 198059 },
            { 592.654, -45.258, -383.673, 1878, 211584 }
        },
        {
            {  15.000, 8.57148,  134.527, 2997, 33673 },
            { -21.763, 2.15030,  93.1000, 2999, 14403 },
            { -26.147, 2.07234,  31.8040, 2988, 12605 },
            {  13.959, 4.80210,  27.6930, 3015, 33127 },
            { -36.978, 1.27067, -121.236, 2996, 7455  }
        },
        {
            {  26.5260, 13.1670, -61.1380, 3290, 81747  },
            { -157.135, 9.71280, -270.520, 3238, 5724   },
            {  183.091, 7.60294, -137.503, 3308, 121923 },
            {  52.7830, 4.76922,  24.2000, 3308, 120751 },
            { -19.0790, 8.24603, -264.215, 3276, 51261  }
        }
    }
    local obj = test.spawn_no_ai( "rukzak_inventory_box",
        sak.v3f( tbl[ num ][ ind ][ 1 ], tbl[ num ][ ind ][ 2 ], tbl[ num ][ ind ][ 3 ] ),
        tbl[ num ][ ind ][ 4 ], tbl[ num ][ ind ][ 5 ]
    )
    misc.process_spawn()
    level.map_add_object_spot( obj.id, "crlc_big_treasure3", "Награда Волка" )
    if obj then
        local tbl1 = {
            { "af_dummy_kolobok_capsule",    "scientific_outfit"         },
            { "af_dummy_glassbeads_capsule", "freedom_scientific_outfit" },
            { "af_dummy_pellicle_capsule",   "merc_scientific_outfit"    }
        }
        for i = 1, 2 do misc.spawn_to( tbl1[ num ][ i ], obj ) end
        sak.off_on( obj )
    end
    sak.send_tip(
        "Получена наводка на тайник.", "Награда Волка", 5, 15, "g_g", "sak", "green"
    )
end

function add_rad_zil_treasure()
    local ind = ( amk_vars.x18_iq_check  or 1 )
              + ( amk_vars.r_treas_items or 1 )
    if ind > 11 then ind = 11 end
    local tbl = {
        { 637.452, -43.691, -57.504, 1896, 226174 },
        { 668.270, -46.123, -45.303, 1896, 227185 },
        { 643.378, -44.713, -71.633, 1896, 226094 },
        { 618.778, -53.058, -84.032, 1896, 225500 },
        { 603.778, -46.026, -59.894, 1894, 218268 },
        { 605.751, -50.797, -13.619, 1899, 216375 },
        { 587.725, -47.773, -15.706, 1900, 209900 },
        { 596.912, -46.937,  16.169, 1900, 211908 },
        { 614.221, -46.268, -25.132, 1897, 222769 },
        { 587.426, -44.708, -51.695, 1898, 210190 },
        { 590.697, -48.049, -49.341, 1898, 210190 }
    }
    local obj = amk.spawn_item( "rukzak_inventory_box",
        sak.v3f( tbl[ ind ][ 1 ], tbl[ ind ][ 2 ], tbl[ ind ][ 3 ] ), tbl[ ind ][ 4 ], tbl[ ind ][ 5 ]
    )
    misc.process_spawn()
    if obj then
        for i = 1, 3 do
            misc.spawn_to( "ammo_og-7b", obj )
            misc.spawn_to( "grenade_f1", obj )
        end
        for i = 1, amk_vars.r_treas_items do
            misc.spawn_to( "ammo_og-7b", obj )
            misc.spawn_to( "grenade_rgd5", obj )
        end
        misc.spawn_to( "wpn_rpg7", obj )
        misc.spawn_to( "svoboda_letter", obj )
        sak.off_on( obj )
    end
end

function zil_mmz_no()
    db.actor:give_info_portion( "mil_freedom_commander_zil_mmz_no" )
end

function add_af_green()
    local rand = amk_vars.r_treas_items or 1
    local arts = { "af_dummy_green_medusa", "af_dummy_green_blood", "af_dummy_green_vyvert" }
    sak.create_items( db.actor, arts[ rand ], 1 )
end

--вскрываем капсулу маятника у Сахарова
--таймеры Сахарова для капсулы маятника
function timer_sakharov_mayat()
    local rnd = lua_random( 8, 12 )
    timers.start_timer( "timer_sakharov_mayat", rnd, 2, 30, "sak_dialog.sakharov_mayat_end()" )
end

function sakharov_mayat_end() db.actor:give_info_portion( "about_mayat_capsule" ) end

local table_mayat_capsule = {
    "af_mayatnik_tuman_new_capsule",
    "af_mayatnik_les_new_capsule",
    "af_mayatnik_radar_new_capsule",
    "af_mayatnik_tesla_new_capsule",
    "af_mayatnik_stadion_new_capsule",
    "af_mayatnik_chaes_new_capsule"
}

function gg_n_mayat_caps_have( n )
    local amount = 0
    for a = 1, #table_mayat_capsule do
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_mayat_capsule[ a ], 1, true ) then
                local kolvo = #k
                amount      = amount + kolvo
            end
        end
    end
    if amount >= n then return true end
end

function give_n_mayat_caps( n )
    local amount
    local art_kol = n
    for a = 1, #table_mayat_capsule do
        amount = 0
        for i, k in pairs( sak_inventory.rucksack ) do
            if strpos( i, table_mayat_capsule[ a ], 1, true ) then
                local kolvo = #k
                for m = 1, kolvo do
                    if art_kol > 0 then
                        local obj = g_sim:object( k[ m ] )
                        if obj then g_sim:release( obj, true ) end
                        amount  = amount + 1
                        art_kol = art_kol - 1
                    end
                end
            end
        end
        if amount ~= 0 then
            sak.relocate_item( db.actor, "out", table_mayat_capsule[ a ], amount )
            nlc_vars.sahr_mayatnik = xrs_utils.trim(
                string.sub( table_mayat_capsule[ a ], 1, -9 )
            )
        end
    end
end

function add_ecolog_majatnik()
    if not nlc_vars.sahr_mayatnik then return end
    sak.create_items( db.actor, nlc_vars.sahr_mayatnik, 1 )
    nlc_vars.sahr_mayatnik = nil
end
--+++ универсальная функция спавна ГГ контейнера с капсулой
 function add_m_cont( sect )
    local obj        = misc.spawn_to( sect, 0 )
    local pk         = get_netpk( obj, 1 )
    local data       = pk:get()
    data.custom_data = table_mayat_capsule[
        dsh.get_next_random( "gg_mayatniks", 1, #table_mayat_capsule )
    ]
    pk:set( data )
    sak.relocate_item( db.actor, "in", sect, 1 )
end
--+++ универсальная функция спавна по координатам контейнера с капсулой
local may_tbl = {
    {    378, -51, -179.20, 101537, 2097, "inventory_sakbox_rad"       },
    {  57.41, 6.4,  405.93, 344549,  198, "inventory_sakbox_gar_flame" },
    { 176.83, 8.5, -375.96, 377568,  938, "inventory_sakbox_borov"     }
}

function spawn_m_cont( num )
    local obj = alife():create( may_tbl[ num ][ 6 ],
        sak.v3f( may_tbl[ num ][ 1 ], may_tbl[ num ][ 2 ], may_tbl[ num ][ 3 ] ),
        may_tbl[ num ][ 4 ], may_tbl[ num ][ 5 ]
    )
    local pk         = get_netpk( obj, 1 )
    local data       = pk:get()
    data.custom_data = table_mayat_capsule[
        dsh.get_next_random( "gg_mayatniks", 1, #table_mayat_capsule )
    ]
    pk:set( data )
end

--функции для Доцента
local art_in_box = nil

function give_inventory_sakbox()
    for i = 1, table.getn( table_sakboxes ) do
        if sak.have_items_count( table_sakboxes[ i ], 1 ) then
            local sobj = db.actor:object( table_sakboxes[ i ] )
            local pk   = get_netpk(sobj, 1 )
            local data = pk:get()
            if data.custom_data and data.custom_data ~= "" then
                art_in_box = data.custom_data
            else
                art_in_box = table_mayat_capsule[ amk_vars.r_task_reward or 1 ]
            end
            sak_inventory.release_actor_items( table_sakboxes[ i ], 1 )
            nlc_vars.art_in_box = art_in_box
            break
        end
    end
end

function add_docent_majatnik()
    local art_in_box = ( nlc_vars.art_in_box or art_in_box )
    sak.create_items( db.actor, art_in_box, 1 )
    sak.create_items( db.actor, "arc_art_box_1basic", 1 )
    nlc_vars.art_in_box = nil
end
--спавним рюкзак с гаусс-пистолетом в ТД
function add_gungauss()
    local obj = amk.spawn_item( "rukzak_inventory_box",
        sak.v3f( 132.852386, 3.822061, -180.043427 ), 926, 329638
    )
    misc.process_spawn()
    if obj then
        misc.spawn_to( "wpn_gungauss", obj )
        sak.off_on( obj )
    end
end
--мосинка и прицел
function add_mosinka()
    sak.create_items( db.actor, "wpn_mosin", 1 )
    sak.create_items( db.actor, "wpn_addon_pe", 1 )
end
--приз от Лёхи
function timer_junkman()
    local rnd = lua_random( 1, 2 )   -- заменил награду и время соответственно.
    timers.start_timer( "timer_junkman", rnd, 0, 30, "sak_dialog.timer_junkman_end()" )
end
function timer_junkman_end()
    db.actor:give_info_portion( "info_outfit_tourist_prize" )
end

function take_outfit_dolg_prize( first_speaker, second_speaker )
    local sect = "outfit_dolg_m1"
    if amk_vars.r_treas_items == 2 then sect = "dolg_scientific_outfit" end
    local obj = misc.spawn_to( sect, db.actor )
    misc.process_spawn()
    if obj then
        params.upd_condition( obj, 0.61 )
        sak.relocate_item( second_speaker, "in", sect, 1 )
    end
end

--спавним тайник Ореха в райцентре по наводке Кочерги
function take_treasure_dead_oreh()
    local obj = amk.spawn_item( "rukzak_inventory_box",
        sak.v3f( -84.221352, 11.228296, 40.612862 ), 3838, 226392
    )
    misc.process_spawn()
    level.map_add_object_spot( obj.id, "crlc_big_treasure3", "Где-то тут хабар Призрака" )
    if obj then
        local tbl  = { "af_cry_3", "af_spirit_3", "af_armor_3", "af_kol_3", "af_babka_3" }
        local ind  = amk_vars.r_task_reward or 1
        misc.spawn_to( "wpn_saiga12c_m1", obj )
        misc.spawn_to( tbl[ ind ], obj )
        tbl        = { "antirad", "medkit_army", "ammo_12x76_zhekan", "suhpay" }
        for _, v in ipairs( tbl ) do
            for i = 1, 5 do misc.spawn_to( v, obj ) end
        end
        sak.off_on( obj )
    end
end

--для квестов Сидоровича
function box_conserv_spawn()
    g_sim:create( "box_conserv", sak.v3f(-17.883831, 0.637770, 296.710663 ), 259213, 187)
end

function add_sidor_med()
    sak.create_items( db.actor, "medkit", 1 )
    sak.create_items( db.actor, "bandage", 2 )
    sak.create_items( db.actor, "antirad", 1 )
end

function add_sidor_small_gift()
    sak.create_items( db.actor, "medkit", 2 )
    sak.create_items( db.actor, "bandage", 4 )
    sak.create_items( db.actor, "antirad", 1 )
    sak.create_items( db.actor, "ammo_9x18_pmm", 5 )
end

function add_sidor_big_gift()
    sak.create_items( db.actor, "medkit", 2 )
    sak.create_items( db.actor, "bandage", 4 )
    sak.create_items( db.actor, "antirad", 2 )
    sak.create_items( db.actor, "ammo_5.45x39_fmj", 5 )
end

function add_mutant_opt()
    sak.create_items( db.actor, "mutant_boar_leg", 10 )
    sak.create_items( db.actor, "mutant_zombie_hand", 10 )
    sak.create_items( db.actor, "mutant_flesh_eye", 10 )
end

function give_mutant_opt()
    sak_inventory.release_actor_items( "mutant_boar_leg", 10 )
    sak_inventory.release_actor_items( "mutant_zombie_hand", 10 )
    sak_inventory.release_actor_items( "mutant_flesh_eye", 10 )
end

function have_mutant_opt()
    return
            sak.have_items_count( "mutant_boar_leg", 10    ) ~= false
        and sak.have_items_count( "mutant_zombie_hand", 10 ) ~= false
        and sak.have_items_count( "mutant_flesh_eye", 10   ) ~= false
end
-- спавним ПДА в труп учёного в х6
function warlab_ecolog_body()
    local obj = g_sim:story_object( story_ids.war_ecolog_body_1 )
    misc.spawn_to( "war_ecolog_pda", obj )
    sak.off_on( obj )
end
-- Компас и рубинка в танке в РЛ
function fill_tank_inventory_box()
    local ind = amk_vars.r_treas_items
    local tbl = { "af_red_dummy_spring", "af_red_dummy_battery", "af_red_dummy_pellicle" }
    local obj = g_sim:story_object( story_ids.red_q11_n )
    for _, v in ipairs({ "af_compass_dyn5d", "sak_document4" }) do
        misc.spawn_to( v, obj )
    end
    misc.spawn_to( tbl[ ind ], obj )
    sak.off_on( obj )
end

function timer_docent()
    timers.start_timer( "timer_docent", 0, 12, 30, "sak_dialog.timer_docent_end()" )
end

function timer_docent_end()
    sak.send_tip(
        "Меченный, это Доцент. Подходи в Бар, дело сделано.",
        "Сообщение от Доцента", 11, 20, "ecolog", "sak", "green"
    )
    db.actor:give_info_portion( "docent_message" )
end
-- barman_exo_trade
function timer_barman_exo()
    local rnd = lua_random( 2, 3 )
    timers.start_timer( "timer_barman_exo", rnd, 2, 10, "sak_dialog.timer_barman_exo_end()" )
end

function timer_barman_exo_end()
    sak.send_tip(
        "Меченный, это Бармен. Подходи в Бар, экзоскелет доставили.",
        "Сообщение от Бармена", 11, 20, "barman", "sak", "green"
    )
    db.actor:give_info_portion( "barman_exo_message" )
end
-- freedom_exo_dialog
function timer_freedom_exo()
    local rnd = lua_random( 2, 3 )
    timers.start_timer( "timer_freedom_exo", rnd, 4, 20, "sak_dialog.timer_freedom_exo_end()" )
end

function timer_freedom_exo_end()
    sak.send_tip(
        "Меченный, это Шинкарь. Подходи на склады, экзоскелет доставили.",
        "Сообщение от Шинкаря", 11, 20, "freedom", "sak", "green"
    )
    db.actor:give_info_portion( "freedom_exo_message" )
end
-- dolg_exo_dialog
function timer_dolg_exo()
    local rnd = lua_random( 2, 3 )
    timers.start_timer( "timer_dolg_exo", rnd, 6, 30, "sak_dialog.timer_dolg_exo_end()" )
end

function timer_dolg_exo_end()
    sak.send_tip(
        "Меченный, это Петренко. Подходи в Бар, экзоскелет доставили.",
        "Сообщение от Петренко", 11, 20, "dolg", "sak", "green"
    )
    db.actor:give_info_portion( "dolg_exo_message" )
end
-- ara_exo_dialog
function timer_ara_exo()
    local rnd = lua_random( 3, 4 )
    timers.start_timer( "timer_ara_exo", rnd, 2, 30, "sak_dialog.timer_ara_exo_end()" )
end

function timer_ara_exo_end()
    sak.send_tip(
        "Мэчэный - отмэчэный, эта Вахтанг. Захады дарагой, экза прибыл.",
        "Сообщение от Вахтанга", 11, 20, "killer", "sak", "green"
    )
    db.actor:give_info_portion( "ara_exo_message" )
end
-- semenov_green_art
function semenov_green_art_have()
    return
           sak.have_items_count( "af_dummy_green_blood", 1  ) ~= false
        or sak.have_items_count( "af_dummy_green_vyvert", 1 ) ~= false
        or sak.have_items_count( "af_dummy_green_medusa", 1 ) ~= false
end

function give_semenov_green_art()
    if sak.have_items_count( "af_dummy_green_blood", 1 ) then
        sak_inventory.release_actor_items( "af_dummy_green_blood", 1 )
    elseif sak.have_items_count( "af_dummy_green_vyvert", 1 ) then
        sak_inventory.release_actor_items( "af_dummy_green_vyvert", 1 )
    elseif sak.have_items_count( "af_dummy_green_medusa", 1 ) then
        sak_inventory.release_actor_items( "af_dummy_green_medusa", 1 )
    end
end

local gluzoff_art = ( tostring( nlc_vars.gluzov_art_given ) .. "_dyn5d" ) or "af_soul_dyn5d"

function marsh_soul_have( first_speaker, second_speaker )
    local obj = first_speaker:object( gluzoff_art )
    if obj then
        if params.get_condition( obj, 0.999 ) > 0.95 then return true end
    end
    return false
end

function give_marsh_soul( first_speaker, second_speaker )
    dialogs.relocate_item_section( second_speaker, gluzoff_art, "out" )
    nlc_vars.gluzov_art_given = nil
end
--++ для спавна ГГ испорченных запчастей
function add_bad_part( sect, cond )
    local obj = misc.spawn_to( sect, db.actor )
    misc.process_spawn()
    if obj then
        params.upd_condition( obj.id, cond )
        sak.relocate_item( db.actor, "in", sect, 1 )
    end
end
--++ mil_kurjer_pda
function add_mil_kurjer_treasure()
    local treases = { 5202, 5207, 5211, 5212, 5214, 5200, 5217, 5228 }
    local sid     = lua_random( 1, #treases )
    local obj     = g_sim:story_object( treases[ sid ] )
    if obj then
        for k, v in ipairs({ "af_dummy_simbion", "af_dummy_buliz", "af_dummy_dummy" }) do
            if k == amk_vars.r_treas_items then
                misc.spawn_to( v, obj )
            end
        end
        misc.spawn_to( "bearer_cheque", obj )
    end
end

function info_kurjer_treasure()
    sak.send_tip(
        "Может действительно стоит поискать на складах. Чем он там расплачиваться собирался?..",
        "Надо запомнить", 5, 15, "g_g", "sak", "yellow"
    )
end
--++ ecolog_outfit_m1 в труп на Радаре и пару кровососов для куражу
function spawn_barmen_find_item()
    local obj = amk.spawn_item( "rukzak_inventory_box",
        sak.v3f( 469.90, -53.74, -102.74 ), 2051, 154203
    )
    misc.process_spawn()
    if obj then
        misc.spawn_to( "ecolog_outfit_m1", obj )
        sak.off_on( obj )
    end
    alife():create( "bloodsucker_normal", sak.v3f( 469.90, -53.74, -102.74 ), 154203, 2051 )
    alife():create( "bloodsucker_normal", sak.v3f( 469.90, -53.74, -102.74 ), 154203, 2051 )
end

-- Круглов ecolog_apparat
function timer_kruglov_aver()
    local rnd = lua_random( 8, 12 )
    timers.start_timer(
        "timer_kruglov_aver", 0, rnd, 30, "sak_dialog.timer_kruglov_aver_end()"
    )
end

function timer_kruglov_aver_end()
    sak.send_tip(
        "Меченный, это Круглов. Подходи на Янтарь, есть работа.",
        "Сообщение от Круглова", 11, 20, "ecolog", "sak", "green"
    )
    db.actor:give_info_portion( "info_kruglov_message_aver" )
end

function timer_kruglov_rf()
    local rnd = lua_random( 8, 12 )
    timers.start_timer(
        "timer_kruglov_rf", 0, rnd, 30, "sak_dialog.timer_kruglov_rf_end()"
    )
end

function timer_kruglov_rf_end()
    sak.send_tip(
        "Меченный, это Круглов. Подходи на Янтарь, есть работа.",
        "Сообщение от Круглова", 11, 20, "ecolog", "sak", "green"
    )
    db.actor:give_info_portion( "info_kruglov_message_rf" )
end

function timer_kruglov_art()
    local rnd = lua_random( 8, 12 )
    timers.start_timer(
        "timer_kruglov_art", 0, rnd, 30, "sak_dialog.timer_kruglov_art_end()"
    )
end

function timer_kruglov_art_end()
    sak.send_tip(
        "Меченный, это Круглов. Вопрос с обменом решился.",
        "Сообщение от Круглова", 11, 20, "ecolog", "sak", "green"
    )
    db.actor:give_info_portion( "info_kruglov_art_chan_yes" )
end

-------------------  А это надо вообще??? ---------------------
function timer_kruglov()
    local rnd = lua_random( 8, 12 )
    timers.start_timer( "timer_kruglov", 0, rnd, 30, "sak_dialog.timer_kruglov_end()" )
end
function timer_kruglov_end()
    sak.send_tip( "Меченный, это Круглов. Подходи на Янтарь, есть работа.", "Сообщение от Круглова", 11, 20, "ecolog", "sak", "green" )
    db.actor:give_info_portion( "info_kruglov_message" )
end
-----------------------------------------------------------

-- TODO: изменить/разнообразить награду...
function take_eye_kruglov()
    sak.create_items( db.actor, "af_eye_dyn5d", 1 )
end

function klyk_pri_secret()
    treasure_manager.get_treasure_manager():give_treasure( "pri_secret_0003" )
end

--тайник в гостинице
function strelok_pri_secret()
    local obj = amk.spawn_item( "rukzak_inventory_box",
        sak.v3f( 111.798965, 3.999500, 121.063812 ), 2182, 222835
    )
    misc.process_spawn()
    if obj then
        for _, v in ipairs({
            "af_unknown_1_new",
            "af_unknown_2_new",
            "af_unknown_12_new",
            "af_unknown_20_new",
            "af_unknown_29_new",
        }) do
            misc.spawn_to( v, obj )
        end
        sak.off_on( obj )
    end
end

function add_mutant_kulinar()
    sak.create_items( db.actor, "mutant_boar_leg", 6 )
    sak.create_items( db.actor, "mutant_dog_tail", 8 )
end

function add_borov_1prize()
    sak.create_items( db.actor, "wpn_mp5", 1 )
    sak.create_items( db.actor, "ammo_9x19_pbp", 10 )
end

function add_borov_2prize()
    sak.create_items( db.actor, "wpn_bizon", 1 )
    sak.create_items( db.actor, "ammo_9x18_pmm", 10 )
    sak.create_items( db.actor, "killer_gaz_outfit_m1", 1 )
end
-- TODO: переделать/убрать.
--shustriy_find_item and artmod_13
function shustryi_outfit_have()
    return
           sak.have_items_count( "killer_gaz_outfit_m1",   1 ) ~= false
        or sak.have_items_count( "merc_scientific_outfit", 1 ) ~= false
end

function give_shustryi_outfit()
    if sak.have_items_count( "killer_gaz_outfit_m1", 1 ) then
        sak_inventory.release_actor_items( "killer_gaz_outfit_m1", 1 )
    elseif sak.have_items_count( "merc_scientific_outfit", 1 ) then
        sak_inventory.release_actor_items( "merc_scientific_outfit", 1 )
    end
end

function take_shustriy_artmod_13()
    sak.create_items( db.actor, "af_cristal_flower_dyn5d", 1 )
end
-- TODO: переделать/убрать.
--new_gar_prapor_courier and artmod_31_32
function add_prapor_poshta()
    sak.create_items( db.actor, "af_unknown_5_new", 1 )
    sak.create_items( db.actor, "mutant_boar_leg", 10 )
    sak.create_items( db.actor, "mutant_dog_tail", 20 )
end
function af_unknown_5_new_have() return sak.have_items_count( "af_unknown_5_new", 1 ) ~= false end
function give_af_unknown_5_new() sak_inventory.release_actor_items( "af_unknown_5_new", 1 ) end
function have_20_mutant_dog_tail() return sak.have_items_count( "mutant_dog_tail", 20 ) ~= false end
function give_20_mutant_dog_tail() sak_inventory.release_actor_items( "mutant_dog_tail", 20 ) end
function add_greens_2kolbasa() sak.create_items( db.actor, "green_kolbasa", 2 ) end
function take_prapor_artmod_31() sak.create_items( db.actor, "af_ameba_slug_dyn5d", 1 ) end
function add_3rad_cart() sak.create_items( db.actor, "rad_cart", 3 ) end
function take_prapor_artmod_32() sak.create_items( db.actor, "af_electra_flash_dyn5d", 1 ) end

-- Бром спас
-- TODO: заменить на квест по абакану на ЗХ?
function spawn_drunk_dolg_spas()
    if nlc_vars.brom_spas_spawned == nil then
        local points = {
            { -334.63, -22.05, 217.47, 16460, 1839 },
            { -329.84, -20.05, 212.79, 19859, 1839 },
            { -337.12, -23.07, 251.70, 14561, 1835 },
            { -332.74, -23.07, 253.95, 17972, 1835 },
            { -332.99, -23.02, 263.95, 17501, 1834 },
        }
        local rand = lua_random( #points )
        g_sim:create( "wpn_spas12",
            sak.v3f( points[ rand ][ 1 ], points[ rand ][ 2 ], points[ rand ][ 3 ] ),
            points[ rand ][ 4 ], points[ rand ][ 5 ]
        )
        nlc_vars.brom_spas_spawned = true
    end
end

--mil_minigamer_food
function mil_minigamer_food_have()
    return
            sak.have_items_count( "vodka",    10 ) ~= false
        and sak.have_items_count( "conserva", 10 ) ~= false
end

function give_mil_minigamer_food()
    sak_inventory.release_actor_items( "vodka",    10 )
    sak_inventory.release_actor_items( "conserva", 10 )
end

function have_any_bart_cart()
    if have_any_bart() or have_any_cart() then return true end
    return false
end

function exo_charge_some_done()
    local actor = db.actor
    if
           actor:has_info( "exo_charge_half_done" )
        or actor:has_info( "exo_charge_full_done" )
    then
        return true
    end
    return false
end

--new_ak_strelok
function take_bar_lisaped_ak( first_speaker, second_speaker )
    local obj = misc.spawn_to( "wpn_ak74_m1", db.actor )
    misc.process_spawn()
    if obj then
        params.upd_condition( obj.id, 0.39 )
        sak.relocate_item( second_speaker, "in", "wpn_ak74_m1", 1 )
    end
end

function have_lisaped_opt()
    return
            sak.have_items_count( "wpn_ak74_m1", 1 ) ~= false
        and sak.have_items_count( "wpn_fn2000",  1 ) ~= false
        and sak.have_items_count( "wpn_aks47",   1 ) ~= false
end

function give_lisaped_opt()
    sak_inventory.release_actor_items( "wpn_ak74_m1", 1 )
    sak_inventory.release_actor_items( "wpn_fn2000",  1 )
    sak_inventory.release_actor_items( "wpn_aks47",   1 )
end

function is_pahom_buzz_time()
    if not timers.check_timer( "pahom_buzz_pause" ) then
        return true
    else
        return false
    end
end

function mil_freedom_commander_choice()
    local rec_name
    local rand = amk_vars.r_treas_items or 1
    local arts = { "af_dummy_green_medusa", "af_dummy_green_blood", "af_dummy_green_vyvert" }
    local abs  = amk_vars.r_treas_items + amk_vars.r_task_reward - 1
    if abs > 7 or abs < 1 then abs = 7 end
    for k, v in pairs( sak_artmods.amk_resiepts ) do
        for i = 1, #v do
            if v[ i ] == test.tbl_recipt.lvl8[ abs ] then
                rec_name = game.translate_string( sak_artmods.amk_resiepts[ k ][ 3 ] )
            end
        end
    end
    db.actor:give_talk_message(
        "'" .. game.translate_string( system_ini():r_string( arts[ rand ], "inv_name" ) )
        .. "', или рецепт на абсолют '"
        .. game.translate_string( rec_name ) .. "' ?",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0), "simple_answer_item"
    )
end

function mil_freedom_commander_recipt()
    local abs  = amk_vars.r_treas_items + amk_vars.r_task_reward - 1
    if abs > 7 or abs < 1 then abs = 7 end
    local info = test.tbl_recipt.lvl8[ abs ] or "info_amk_recipt_controller_skalp"
    test.sms_recipt_found( info )
    db.actor:give_info_portion( info )
end

function kruglov_arts_have( flag )
    if flag == false then
        return (
            nlc_vars.kruglov_exchanges ~= nil
            and nlc_vars.kruglov_exchanges >= 5
        )
    else
        return (
            nlc_vars.kruglov_exchanges == nil
            or nlc_vars.kruglov_exchanges < 5
        )
    end
end

function kruglov_exchange_done()
    if not nlc_vars.kruglov_exchanges then
        nlc_vars.kruglov_exchanges = 1
    else
        nlc_vars.kruglov_exchanges = nlc_vars.kruglov_exchanges + 1
    end
end

function shustryi_art_needed()
    local ind  = nlc_vars.stored_r_treas_items + amk_vars.r_task_reward -1
    if ind > 7 or ind < 1 then ind = 7 end
    local art_sect = test.tbl_arts.lvl1[ ind ]
    db.actor:give_talk_message(
        game.translate_string( system_ini():r_string( art_sect, "inv_name" ) )
        .. ". Давай так: если поделишься таким, то я тебе тот рецептик солью, что у бандоса выведал. Угу?",
        "ui\\ui_iconsTotal", Frect():set( 0, 0, 0, 0), "simple_answer_item"
    )
end

local shustr_art_sect

function have_shustryi_art()
    local ind  = nlc_vars.stored_r_treas_items + amk_vars.r_task_reward - 1
    if ind > 7 or ind < 1 then ind = 7 end
    shustr_art_sect = test.tbl_arts.lvl1[ ind ]
    if sak.have_items_count( shustr_art_sect, 1 ) then return true end
    return false
end

function give_shustryi_art( first_speaker, second_speaker )
    sak_inventory.release_actor_items( shustr_art_sect, 1 )
    second_speaker:set_relation( game_object.friend, first_speaker )
end

-- Шустрый тайник в Кишке
function add_kishka_rukzak()
    local tbl = {
        { -598.399,  8.34438, -403.552, 3933, 1802    },
        {  456.127,  7.66937, -521.576, 4155, 991109  },
        {  485.969, -0.44395, -436.505, 4155, 985391  },
        {  349.958,  23.7140,  288.953, 4142, 810842  },
        {  462.327,  22.8430,  294.304, 4142, 810842  },
        {  457.464, -1.32516, -506.449, 4165, 1018530 },
        {  440.793, -1.69576, -504.835, 4165, 1018530 },
        {  487.431,  0.79801, -429.278, 4165, 1020016 },
        {  511.908,  2.44494, -431.190, 4165, 1020016 },
        {  347.508,  18.8010,  276.240, 4144, 810834  },
        {  462.743,  19.9230,  279.985, 4144, 815843  }
    }
    local ind = amk_vars.r_treas_items + amk_vars.x18_iq_check or 1
    if ind > 11 then ind = 11 end
    local obj = test.spawn_no_ai(
                    "rukzak_inventory_box",
                    sak.v3f( tbl[ ind ][ 1 ], tbl[ ind ][ 2 ], tbl[ ind ][ 3 ] ),
                    tbl[ ind ][ 4 ], tbl[ ind ][ 5 ]
                )
    misc.process_spawn()
    if obj and dsh.get_next_random( "generic_rnd" ) > 0.18 then
        misc.spawn_to( test.rnd_rec_art_info( test.tbl_arts, 2 ), obj )
        misc.spawn_to( "suhpay", obj )
        misc.spawn_to( "wpn_pb", obj )
        sak.off_on( obj )
    end
end

function chimera_kogot_have()
    return sak.have_items_count( "mutant_chimera_kogot", 3 ) ~= false
end